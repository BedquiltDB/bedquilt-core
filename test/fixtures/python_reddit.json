{
  "kind": "Listing",
  "data": {
    "modhash": "9j9m4u9qln2ffc0658ba5e248de7e2fde708c7d96a108753fa",
    "children": [
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;If you are about to ask a question about how to do something in python, please check out &lt;a href=\"/r/learnpython\"&gt;/r/learnpython&lt;/a&gt;. It is a very helpful community that is focused on helping people get answers that they understand.&lt;/p&gt;\n\n&lt;p&gt;As with any subreddit before you post there, please &lt;a href=\"/r/learnpython/wiki/config/sidebar\"&gt;familiarize yourself with the rules and guidelines in their sidebar&lt;/a&gt;. The most notable rule is to not just post the question; explain what you&amp;#39;ve tried and any pseudocode you may have worked on thus far.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"/r/learnpython\"&gt;/r/learnpython&lt;/a&gt; isn&amp;#39;t just for homework; you can get help with most aspects of python that you don&amp;#39;t understand, even if it isn&amp;#39;t for a school project.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;For those who are new to programming, welcome. To those who are returning or are finishing up their schooling, congrats and keep it coming. To those who are lifers in the field I have no words besides keep being cool.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Thanks &lt;a href=\"/u/Needsmoretests\"&gt;/u/Needsmoretests&lt;/a&gt; for putting it well. Please do read &lt;a href=\"https://www.reddit.com/r/Python/comments/3kestk/post_learning_questions_to_rlearnpython/cuxedpo\"&gt;the much better intro / comment written by Needsmoretests below&lt;/a&gt;. There&amp;#39;s so much to learn, and many places to learn it in! &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "If you are about to ask a question about how to do something in python, please check out /r/learnpython. It is a very helpful community that is focused on helping people get answers that they understand.\n\nAs with any subreddit before you post there, please [familiarize yourself with the rules and guidelines in their sidebar](/r/learnpython/wiki/config/sidebar). The most notable rule is to not just post the question; explain what you've tried and any pseudocode you may have worked on thus far.\n\n/r/learnpython isn't just for homework; you can get help with most aspects of python that you don't understand, even if it isn't for a school project.\n\n&gt; For those who are new to programming, welcome. To those who are returning or are finishing up their schooling, congrats and keep it coming. To those who are lifers in the field I have no words besides keep being cool.\n\nThanks /u/Needsmoretests for putting it well. Please do read [the much better intro / comment written by Needsmoretests below](https://www.reddit.com/r/Python/comments/3kestk/post_learning_questions_to_rlearnpython/cuxedpo). There's so much to learn, and many places to learn it in! ",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "3kestk",
          "from_kind": null,
          "gilded": 0,
          "archived": true,
          "clicked": false,
          "report_reasons": null,
          "author": "aphoenix",
          "media": null,
          "score": 302,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 43,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": 1441933227,
          "link_flair_css_class": null,
          "author_flair_css_class": "",
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": true,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/3kestk/post_learning_questions_to_rlearnpython/",
          "locked": false,
          "name": "t3_3kestk",
          "created": 1441927176,
          "url": "https://www.reddit.com/r/Python/comments/3kestk/post_learning_questions_to_rlearnpython/",
          "author_flair_text": "reticulated",
          "quarantine": false,
          "title": "Post learning questions to /r/LearnPython",
          "created_utc": 1441898376,
          "distinguished": "moderator",
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 302
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xw3gx",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "Lord_Greywether",
          "media": null,
          "score": 102,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 19,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xw3gx/lackey_python_library_for_graphical_desktop/",
          "locked": false,
          "name": "t3_4xw3gx",
          "created": 1471327311,
          "url": "https://github.com/glitchassassin/lackey",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Lackey - Python library for graphical desktop automation",
          "created_utc": 1471298511,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 102
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "python.org",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xsw5z",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "hongminhee",
          "media": null,
          "score": 187,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 183,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xsw5z/pep_526_variable_declaration_syntax/",
          "locked": false,
          "name": "t3_4xsw5z",
          "created": 1471284358,
          "url": "http://www.python.org/dev/peps/pep-0526",
          "author_flair_text": null,
          "quarantine": false,
          "title": "PEP 526 — Variable Declaration Syntax",
          "created_utc": 1471255558,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 187
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xx22u",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "pattu777",
          "media": null,
          "score": 8,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 2,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xx22u/ipython_notebook_of_data_strutures_and_algorithms/",
          "locked": false,
          "name": "t3_4xx22u",
          "created": 1471340541,
          "url": "https://github.com/pattu777/Algorithms-and-Data-structures",
          "author_flair_text": null,
          "quarantine": false,
          "title": "IPython notebook of data strutures and algorithms",
          "created_utc": 1471311741,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 8
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "twitter.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xtp5i",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "yaph",
          "media": null,
          "score": 48,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 2,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xtp5i/brandon_rhodes_on_twitter_welcome_to_the_new/",
          "locked": false,
          "name": "t3_4xtp5i",
          "created": 1471298749,
          "url": "https://twitter.com/brandon_rhodes/status/764265053147148288",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Brandon Rhodes on Twitter: “Welcome to the new http://pyvideo.org !” Thanks to the original maintainers, the new, &amp; the PSF for this site!",
          "created_utc": 1471269949,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 48
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "learn.adafruit.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xumhx",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "tdicola",
          "media": null,
          "score": 28,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xumhx/micropython_basics_what_is_micropython/",
          "locked": false,
          "name": "t3_4xumhx",
          "created": 1471309863,
          "url": "https://learn.adafruit.com/micropython-basics-what-is-micropython",
          "author_flair_text": null,
          "quarantine": false,
          "title": "MicroPython Basics: What is MicroPython?",
          "created_utc": 1471281063,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 28
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xwvu9",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "metakirby5",
          "media": null,
          "score": 4,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xwvu9/codivim_an_interactive_coding_scratchpad_with/",
          "locked": false,
          "name": "t3_4xwvu9",
          "created": 1471338104,
          "url": "https://github.com/metakirby5/codi.vim",
          "author_flair_text": null,
          "quarantine": false,
          "title": "codi.vim - An interactive coding scratchpad with Python support!",
          "created_utc": 1471309304,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 4
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I created a way to make interactive dashboards in Python. Jupyter interactive widgets are great but the interactions allowed are somewhat simple. For example, I want to interact with my graphs and trigger other components based on those interactions. I was inspired by &lt;a href=\"https://github.com/stitchfix/pyxley\"&gt;Pyxley&lt;/a&gt; but wanted to create a different api. So I came up with &lt;a href=\"https://github.com/jwkvam/bowtie\"&gt;Bowtie&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s essentially a python api that talks to react components via socketio. I made a &lt;a href=\"http://bowtie-demo.herokuapp.com\"&gt;demo&lt;/a&gt; and all the code to run the dashboard was generated by this &lt;a href=\"https://github.com/jwkvam/bowtie-demo/blob/master/example.py\"&gt;file&lt;/a&gt;. Unfortunately the documentation is non-existent for now, all there is to go off is that example and the source code. I&amp;#39;m wondering what people think and am looking for feedback.&lt;/p&gt;\n\n&lt;p&gt;The demo uses the IRIS dataset. You can select the different attributes for each axis. The 3D plot is buggy for reasons I don&amp;#39;t understand yet, but I left it in there anyway. After you choose the X and Y dimensions you can select data points with the lasso or box tool and it will build a simple regression model using those points with KernelRidge regression. It then plots that model in the lower left and shows the selected points in a table on the lower right. You can change the alpha parameter of KernelRidge with the slider.&lt;/p&gt;\n\n&lt;p&gt;The set of widgets is still pretty limited. There&amp;#39;s only a slider, dropdown, button, plotly plot, and table components. They support basic events (e.g. plotly supports click and select events) and you can send data to some of them (i.e. dropdown, plot, and table components).&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I created a way to make interactive dashboards in Python. Jupyter interactive widgets are great but the interactions allowed are somewhat simple. For example, I want to interact with my graphs and trigger other components based on those interactions. I was inspired by [Pyxley](https://github.com/stitchfix/pyxley) but wanted to create a different api. So I came up with [Bowtie](https://github.com/jwkvam/bowtie).\n\nIt's essentially a python api that talks to react components via socketio. I made a [demo](http://bowtie-demo.herokuapp.com) and all the code to run the dashboard was generated by this [file](https://github.com/jwkvam/bowtie-demo/blob/master/example.py). Unfortunately the documentation is non-existent for now, all there is to go off is that example and the source code. I'm wondering what people think and am looking for feedback.\n\nThe demo uses the IRIS dataset. You can select the different attributes for each axis. The 3D plot is buggy for reasons I don't understand yet, but I left it in there anyway. After you choose the X and Y dimensions you can select data points with the lasso or box tool and it will build a simple regression model using those points with KernelRidge regression. It then plots that model in the lower left and shows the selected points in a table on the lower right. You can change the alpha parameter of KernelRidge with the slider.\n\nThe set of widgets is still pretty limited. There's only a slider, dropdown, button, plotly plot, and table components. They support basic events (e.g. plotly supports click and select events) and you can send data to some of them (i.e. dropdown, plot, and table components).",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xy9ln",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "qacek",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": true,
          "edited": 1471332558,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xy9ln/create_interactive_dashboards_entirely_in_python/",
          "locked": false,
          "name": "t3_4xy9ln",
          "created": 1471360589,
          "url": "https://www.reddit.com/r/Python/comments/4xy9ln/create_interactive_dashboards_entirely_in_python/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Create interactive dashboards entirely in Python with my project called bowtie",
          "created_utc": 1471331789,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xy8xe",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "avamsi",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": true,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xy8xe/downloading_client_with_support_for_multiple_ip/",
          "locked": false,
          "name": "t3_4xy8xe",
          "created": 1471360230,
          "url": "https://github.com/avamsi/Flash",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Downloading client with support for multiple IP addresses / adapters",
          "created_utc": 1471331430,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xy4h9",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "eeojun",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": true,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xy4h9/gossip_protocol_simulation_with_evil_nodes/",
          "locked": false,
          "name": "t3_4xy4h9",
          "created": 1471357865,
          "url": "https://github.com/eugene-eeo/evil-gossip",
          "author_flair_text": null,
          "quarantine": false,
          "title": "gossip protocol simulation with evil nodes",
          "created_utc": 1471329065,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "pastebin.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xy1ha",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "CyberSlasher26",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": true,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xy1ha/incomplete_story_program_opinions_appreciated/",
          "locked": false,
          "name": "t3_4xy1ha",
          "created": 1471356281,
          "url": "http://pastebin.com/cFQJ2Fs8",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Incomplete Story Program - Opinions Appreciated!",
          "created_utc": 1471327481,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi &lt;a href=\"/r/python\"&gt;r/python&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve begun a little project, with the intention of developing an engine which, given an arbitrary number of  input strings, generates a Regular Expression, which accurately describes the input - that&amp;#39;s the basic premise; a little more detail:&lt;/p&gt;\n\n&lt;p&gt;I intend to use this engine to build regular expressions for log identification; specifically, I wish to be able capture key components of logs (IP, URLs, hosts, severity) into named groups. This is fairly trivial for logs that have sane formatting and sub-delimiters (such as: source=&amp;lt;some_IP&amp;gt; | mac=&amp;lt;mac_address&amp;gt;|), but these types of logs are few and far between, sadly. It&amp;#39;s possible to identify some tokens by pattern, but in order to accurately determine what group a particular token may belong to, I believe Lexical Analysis is the way to go (I may be well off-base with that assumption, so please do correct me if I&amp;#39;m wrong).&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve broken out my project into multiple components:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Delimiter:- Attempts automated identification of any delimiter\nTokeniser:- Tokenises a string into constituent parts.\nClusteriser:- Given an arbitrary input, attempts to cluster members into named groups\nClassifier:- Describes a token, as accurately as possible, using regular expressions\nConcatenator:- Takes an arbitrary-sized cluster of classified strings, and attempts to build a single, valid RegEx\nValidator:- Validates a regular expression\nOptimiser:- Attempts to make optimisations to a regular expression. These optimisations are based on current BP.\nDB:- Database interaction class\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The intended flow will be:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Validate the input strings meet some yet-to-be-determined criteria (length, complexity).\nSplit the input into a list\nCluster the members of the list\nFor each cluster: \n    Tokenise each member by 1WC, 2WC, 3WC, 4WC and 5WC (word count)\n    Tokenise individual tokens into composite elements\n    Perform frequency analysis and some form of Lexical Analysis, to determine the delimiter\n    Use the analysed tokens to build a regular expression\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I understand there&amp;#39;s a huge leap from tokenisation to analysis, which is where I require some direction: are there some algorithms I can use to identify the delims? Any ideas, suggestions, reading material, etc. would be of great help and extremely appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hi r/python\n\nI've begun a little project, with the intention of developing an engine which, given an arbitrary number of  input strings, generates a Regular Expression, which accurately describes the input - that's the basic premise; a little more detail:\n\nI intend to use this engine to build regular expressions for log identification; specifically, I wish to be able capture key components of logs (IP, URLs, hosts, severity) into named groups. This is fairly trivial for logs that have sane formatting and sub-delimiters (such as: source=&lt;some_IP&gt; | mac=&lt;mac_address&gt;|), but these types of logs are few and far between, sadly. It's possible to identify some tokens by pattern, but in order to accurately determine what group a particular token may belong to, I believe Lexical Analysis is the way to go (I may be well off-base with that assumption, so please do correct me if I'm wrong).\n\nI've broken out my project into multiple components:\n\n    Delimiter:- Attempts automated identification of any delimiter\n    Tokeniser:- Tokenises a string into constituent parts.\n    Clusteriser:- Given an arbitrary input, attempts to cluster members into named groups\n    Classifier:- Describes a token, as accurately as possible, using regular expressions\n    Concatenator:- Takes an arbitrary-sized cluster of classified strings, and attempts to build a single, valid RegEx\n    Validator:- Validates a regular expression\n    Optimiser:- Attempts to make optimisations to a regular expression. These optimisations are based on current BP.\n    DB:- Database interaction class\n\nThe intended flow will be:\n\n    Validate the input strings meet some yet-to-be-determined criteria (length, complexity).\n    Split the input into a list\n    Cluster the members of the list\n    For each cluster: \n        Tokenise each member by 1WC, 2WC, 3WC, 4WC and 5WC (word count)\n        Tokenise individual tokens into composite elements\n        Perform frequency analysis and some form of Lexical Analysis, to determine the delimiter\n        Use the analysed tokens to build a regular expression\n\nI understand there's a huge leap from tokenisation to analysis, which is where I require some direction: are there some algorithms I can use to identify the delims? Any ideas, suggestions, reading material, etc. would be of great help and extremely appreciated.\n    ",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xvf77",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "RedSquirl",
          "media": null,
          "score": 5,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 2,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xvf77/regular_expression_generator/",
          "locked": false,
          "name": "t3_4xvf77",
          "created": 1471319198,
          "url": "https://www.reddit.com/r/Python/comments/4xvf77/regular_expression_generator/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Regular Expression Generator",
          "created_utc": 1471290398,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 5
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;My tutorial just got posted up on Pluralsight. See how you can use RethinkDB in your python projects. --&amp;gt; &lt;a href=\"http://tutorials.pluralsight.com/python/build-a-simple-file-storage-service-using-vuejs-flask-and-rethinkdb\"&gt;http://tutorials.pluralsight.com/python/build-a-simple-file-storage-service-using-vuejs-flask-and-rethinkdb&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "My tutorial just got posted up on Pluralsight. See how you can use RethinkDB in your python projects. --&gt; http://tutorials.pluralsight.com/python/build-a-simple-file-storage-service-using-vuejs-flask-and-rethinkdb",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xw9x8",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "afropolymath",
          "media": null,
          "score": 5,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xw9x8/learn_to_use_rethinkdb_with_flask/",
          "locked": false,
          "name": "t3_4xw9x8",
          "created": 1471329631,
          "url": "https://www.reddit.com/r/Python/comments/4xw9x8/learn_to_use_rethinkdb_with_flask/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Learn to use RethinkDB with Flask",
          "created_utc": 1471300831,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 5
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I would like to learn Django and I was wondering is there a tutorial for it that has approach similar to Michael Hartl&amp;#39;s tutorial for Ruby on Rails? Something that could make me work-capable in a matter of few months if I invest 4-8 hours a day.&lt;/p&gt;\n\n&lt;p&gt;Thanks.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I would like to learn Django and I was wondering is there a tutorial for it that has approach similar to Michael Hartl's tutorial for Ruby on Rails? Something that could make me work-capable in a matter of few months if I invest 4-8 hours a day.\n\nThanks.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xvwse",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "AndIWasLikeOMG",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 3,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xvwse/tutorial_for_django/",
          "locked": false,
          "name": "t3_4xvwse",
          "created": 1471325005,
          "url": "https://www.reddit.com/r/Python/comments/4xvwse/tutorial_for_django/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Tutorial for Django",
          "created_utc": 1471296205,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;After stretching Matplotlib to its limits with an interactive network graph, I&amp;#39;ve recently switched to Bokeh. It&amp;#39;s working great so far, but I&amp;#39;ve run into a speed issue. I have a graph with 666 nodes and 3666 edges, and adding all these circle and line glyphs to the figure takes almost an hour... Obviously I would like to skip this time-consuming step. So I was wondering if there&amp;#39;s a way to get the figure and its objects back into Python from the HTML file – or to save it to some other format and read it back from there. This would allow me to change the figure without generating it from scratch every time.&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance for any help! &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "After stretching Matplotlib to its limits with an interactive network graph, I've recently switched to Bokeh. It's working great so far, but I've run into a speed issue. I have a graph with 666 nodes and 3666 edges, and adding all these circle and line glyphs to the figure takes almost an hour... Obviously I would like to skip this time-consuming step. So I was wondering if there's a way to get the figure and its objects back into Python from the HTML file – or to save it to some other format and read it back from there. This would allow me to change the figure without generating it from scratch every time.\n\nThanks in advance for any help! ",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xxe30",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "midnightrambulador",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xxe30/bokeh_how_to_read_figure_data_back_from_the_html/",
          "locked": false,
          "name": "t3_4xxe30",
          "created": 1471345265,
          "url": "https://www.reddit.com/r/Python/comments/4xxe30/bokeh_how_to_read_figure_data_back_from_the_html/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Bokeh: how to read figure data back from the HTML file (or other format)",
          "created_utc": 1471316465,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xxb0b",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "kungfooey",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xxb0b/redwing_infer_data_types_and_build_a_sql_table/",
          "locked": false,
          "name": "t3_4xxb0b",
          "created": 1471344018,
          "url": "https://github.com/briandailey/redwing",
          "author_flair_text": null,
          "quarantine": false,
          "title": "redwing - infer data types and build a SQL table from a CSV file.",
          "created_utc": 1471315218,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xx9if",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "kungfooey",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xx9if/sample_s3_assemble_a_sample_file_of_data_from_a/",
          "locked": false,
          "name": "t3_4xx9if",
          "created": 1471343407,
          "url": "https://github.com/briandailey/sample-s3-csv",
          "author_flair_text": null,
          "quarantine": false,
          "title": "sample_s3 - assemble a sample file of data from a CSV file on Amazon S3.",
          "created_utc": 1471314607,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;Moving from a nodejs project where we use the joi (&lt;a href=\"https://github.com/hapijs/joi\"&gt;https://github.com/hapijs/joi&lt;/a&gt;) validation framework extensively and happily, what are the experiences that everyone has using a validation framework in python?&lt;/p&gt;\n\n&lt;p&gt;I have found that there are many of them, and a few of them seems very prominent like Cerberus, colander, valideer, etc.  But just wondering, for people that have used the Joi framework, what is the closest validation library that exists in python?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hi,\n\nMoving from a nodejs project where we use the joi (https://github.com/hapijs/joi) validation framework extensively and happily, what are the experiences that everyone has using a validation framework in python?\n\nI have found that there are many of them, and a few of them seems very prominent like Cerberus, colander, valideer, etc.  But just wondering, for people that have used the Joi framework, what is the closest validation library that exists in python?",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xv0dk",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "absolution888",
          "media": null,
          "score": 4,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 4,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xv0dk/python_validation_framework/",
          "locked": false,
          "name": "t3_4xv0dk",
          "created": 1471314277,
          "url": "https://www.reddit.com/r/Python/comments/4xv0dk/python_validation_framework/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Python Validation Framework",
          "created_utc": 1471285477,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 4
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Today I&amp;#39;m very glad to post my (almost) real project for something that is useful and it is the &lt;strong&gt;SCRABBLE BOT&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# A scrabble game hacker V2\nfrom time import time\nstart = time()\n\n\n# Checks if a word S1 is made out of a set of letters S2\ndef string_contains_string(s2, s1):\n    s1 = s1.upper()\n    s2 = list(s2.upper())\n    for o in s1:\n        if o in s2:\n            s2.remove(o)\n        else:\n            return False\n    return True\n\n# Imports words from a dictionary\nwords = open(&amp;#39;dictionary.txt&amp;#39;, &amp;#39;r&amp;#39;).read().split()\n# Letters to search for\nletters = &amp;#39;ABCDEFG&amp;#39;\n\n# Finds all lists from the dictionary that have the same length or lower than the set of letters\npossibilities = []\nfor l in words:\n    if len(l) &amp;lt;= len(letters):\n        possibilities.append(l)\n\n# Checks every word in the possibilities that math the set of letters\noutput = []\nfor x in possibilities:\n    if string_contains_string(letters, x):\n        output.append(x)\n\n# Prints the output and the time taken\nprint(output)\nprint(start-time())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It takes less than 0.05 with 7 letters&lt;/p&gt;\n\n&lt;p&gt;The dictionary that i use has over 40k words&lt;/p&gt;\n\n&lt;p&gt;Any advice is much appreciated&lt;/p&gt;\n\n&lt;p&gt;To Do:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Sort it based on the score of each word&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Clean up the code&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;BTW:\nHow do you make your code clean, without many x, y and many other variables that act as placeholders, because they make me hate myself when debugging my code.&lt;/p&gt;\n\n&lt;p&gt;Thank you and sorry for my bad English.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Today I'm very glad to post my (almost) real project for something that is useful and it is the **SCRABBLE BOT**\n\n    # A scrabble game hacker V2\n    from time import time\n    start = time()\n    \n    \n    # Checks if a word S1 is made out of a set of letters S2\n    def string_contains_string(s2, s1):\n        s1 = s1.upper()\n        s2 = list(s2.upper())\n        for o in s1:\n            if o in s2:\n                s2.remove(o)\n            else:\n                return False\n        return True\n    \n    # Imports words from a dictionary\n    words = open('dictionary.txt', 'r').read().split()\n    # Letters to search for\n    letters = 'ABCDEFG'\n    \n    # Finds all lists from the dictionary that have the same length or lower than the set of letters\n    possibilities = []\n    for l in words:\n        if len(l) &lt;= len(letters):\n            possibilities.append(l)\n    \n    # Checks every word in the possibilities that math the set of letters\n    output = []\n    for x in possibilities:\n        if string_contains_string(letters, x):\n            output.append(x)\n    \n    # Prints the output and the time taken\n    print(output)\n    print(start-time())\n\nIt takes less than 0.05 with 7 letters\n\nThe dictionary that i use has over 40k words\n\nAny advice is much appreciated\n\nTo Do:\n\n* Sort it based on the score of each word\n\n* Clean up the code\n\nBTW:\nHow do you make your code clean, without many x, y and many other variables that act as placeholders, because they make me hate myself when debugging my code.\n\nThank you and sorry for my bad English.\n",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xvpyw",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "Black_Arrow502",
          "media": null,
          "score": 2,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 2,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xvpyw/the_scrabble_bot/",
          "locked": false,
          "name": "t3_4xvpyw",
          "created": 1471322693,
          "url": "https://www.reddit.com/r/Python/comments/4xvpyw/the_scrabble_bot/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "The Scrabble Bot",
          "created_utc": 1471293893,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 2
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;hey reddit, i&amp;#39;m taking a computational thinking class at my community college and im panicking about getting my text book &amp;quot;python 3rd addition, by tony giddas&amp;quot; im getting a copy mailed in but its going to take a while. i was wondering if any of you lovely people could help me find a free pdf of the first chapter or a digital copy. (P.S its the one with banana slices on the cover.) thanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "hey reddit, i'm taking a computational thinking class at my community college and im panicking about getting my text book \"python 3rd addition, by tony giddas\" im getting a copy mailed in but its going to take a while. i was wondering if any of you lovely people could help me find a free pdf of the first chapter or a digital copy. (P.S its the one with banana slices on the cover.) thanks",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xwjqk",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "Drjellybeans",
          "media": null,
          "score": 2,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 2,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xwjqk/need_help_finding_a_python_text_book_pdf_fast/",
          "locked": false,
          "name": "t3_4xwjqk",
          "created": 1471333427,
          "url": "https://www.reddit.com/r/Python/comments/4xwjqk/need_help_finding_a_python_text_book_pdf_fast/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "need help finding a python text book pdf fast",
          "created_utc": 1471304627,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 2
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Inspired by recent reddit posts bemoaning lack of examples in Python library docs, I went through and added over 1000 lines of inline examples to the docstrings in pyparsing&amp;#39;s &lt;a href=\"https://pythonhosted.org/pyparsing/\"&gt;generated docs&lt;/a&gt;. This release also fixes the UnicodeDecodeError problem, as well as some Each matching bugs - complete changelist is &lt;a href=\"https://sourceforge.net/p/pyparsing/code/HEAD/tree/trunk/src/CHANGES\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Inspired by recent reddit posts bemoaning lack of examples in Python library docs, I went through and added over 1000 lines of inline examples to the docstrings in pyparsing's [generated docs](https://pythonhosted.org/pyparsing/). This release also fixes the UnicodeDecodeError problem, as well as some Each matching bugs - complete changelist is [here](https://sourceforge.net/p/pyparsing/code/HEAD/tree/trunk/src/CHANGES).",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xug6r",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "ptmcg",
          "media": null,
          "score": 3,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": "",
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xug6r/pyparsing_218_released_includes_bugfixes_to/",
          "locked": false,
          "name": "t3_4xug6r",
          "created": 1471307891,
          "url": "https://www.reddit.com/r/Python/comments/4xug6r/pyparsing_218_released_includes_bugfixes_to/",
          "author_flair_text": "pyparsing OOP",
          "quarantine": false,
          "title": "pyparsing 2.1.8 released = includes bug-fixes to recent posts and expanded inline code examples",
          "created_utc": 1471279091,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 3
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "blog.yhat.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xvpbf",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "elisebreda",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xvpbf/transforming_olympics_data_into_gifs_with/",
          "locked": false,
          "name": "t3_4xvpbf",
          "created": 1471322461,
          "url": "http://blog.yhat.com/posts/olympic-medals.html",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Transforming Olympics Data into GIFs with Matplotlib.pyplot and Images2gif",
          "created_utc": 1471293661,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt;. I want to develop my own real time communication program (Like Team Speak, Ventrillo, or Mumble) that isn&amp;#39;t peer to peer.&lt;/p&gt;\n\n&lt;p&gt;Somebody downloads the client, points it to an IP address and port and logs on to see other users, channels, admins etc.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve gone through tons of Python courses I&amp;#39;m just in search of a library that will help me enable this. Any ideas? &lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t want to use WebRTC because I really don&amp;#39;t want it to be tied to a browser (Unless I&amp;#39;m missing something on how WebRTC works.)&lt;/p&gt;\n\n&lt;p&gt;Thanks for the help!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hello /r/python. I want to develop my own real time communication program (Like Team Speak, Ventrillo, or Mumble) that isn't peer to peer.\n\nSomebody downloads the client, points it to an IP address and port and logs on to see other users, channels, admins etc.\n\nI've gone through tons of Python courses I'm just in search of a library that will help me enable this. Any ideas? \n\nI don't want to use WebRTC because I really don't want it to be tied to a browser (Unless I'm missing something on how WebRTC works.)\n\nThanks for the help!",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xvp0h",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "K0butsu",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xvp0h/libraries_for_voip/",
          "locked": false,
          "name": "t3_4xvp0h",
          "created": 1471322367,
          "url": "https://www.reddit.com/r/Python/comments/4xvp0h/libraries_for_voip/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Libraries for VoIP?",
          "created_utc": 1471293567,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "plot.ly",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xvjdd",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "Willi_Wilberforce",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xvjdd/interactive_statistical_plots_3d_plots_finance/",
          "locked": false,
          "name": "t3_4xvjdd",
          "created": 1471320528,
          "url": "https://plot.ly/python/#statistical-charts",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Interactive statistical plots, 3D plots, finance charts, and maps in Python",
          "created_utc": 1471291728,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "pendulum.eustace.io",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xvhjs",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "SDisPater",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 3,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xvhjs/pendulum_05_is_out_timezones_made_easier/",
          "locked": false,
          "name": "t3_4xvhjs",
          "created": 1471319945,
          "url": "https://pendulum.eustace.io/history/#0-5",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Pendulum 0.5 is out: Timezones made easier",
          "created_utc": 1471291145,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "youtube.com",
          "banned_by": null,
          "media_embed": {
            "content": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FQk1I6ZxcceU%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DQk1I6ZxcceU&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FQk1I6ZxcceU%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "description": "Presented at !!Con 2015: http://bangbangcon.com !!Con 2015 - Allison Kaptur: Limitless and recursion-free recursion limits! Help us caption &amp; translate this video! http://amara.org/v/Gx3g/",
              "title": "!!Con 2015 - Allison Kaptur: Limitless and recursion-free recursion limits!",
              "url": "http://www.youtube.com/watch?v=Qk1I6ZxcceU",
              "type": "video",
              "author_name": "!!Con",
              "height": 338,
              "width": 600,
              "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FQk1I6ZxcceU%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DQk1I6ZxcceU&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FQk1I6ZxcceU%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "version": "1.0",
              "provider_name": "YouTube",
              "thumbnail_url": "https://i.embed.ly/1/image?url=https%3A%2F%2Fi.ytimg.com%2Fvi%2FQk1I6ZxcceU%2Fhqdefault.jpg&amp;key=b1e305db91cf4aa5a86b732cc9fffceb",
              "thumbnail_height": 360,
              "author_url": "https://www.youtube.com/channel/UC2kxl-dcUYQQvTCuQtfuChQ"
            },
            "type": "youtube.com"
          },
          "link_flair_text": null,
          "id": "4xv74j",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "notgnoshi",
          "media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "description": "Presented at !!Con 2015: http://bangbangcon.com !!Con 2015 - Allison Kaptur: Limitless and recursion-free recursion limits! Help us caption &amp; translate this video! http://amara.org/v/Gx3g/",
              "title": "!!Con 2015 - Allison Kaptur: Limitless and recursion-free recursion limits!",
              "url": "http://www.youtube.com/watch?v=Qk1I6ZxcceU",
              "type": "video",
              "author_name": "!!Con",
              "height": 338,
              "width": 600,
              "html": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FQk1I6ZxcceU%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DQk1I6ZxcceU&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FQk1I6ZxcceU%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "version": "1.0",
              "provider_name": "YouTube",
              "thumbnail_url": "https://i.ytimg.com/vi/Qk1I6ZxcceU/hqdefault.jpg",
              "thumbnail_height": 360,
              "author_url": "https://www.youtube.com/channel/UC2kxl-dcUYQQvTCuQtfuChQ"
            },
            "type": "youtube.com"
          },
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {
            "content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FQk1I6ZxcceU%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DQk1I6ZxcceU&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FQk1I6ZxcceU%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xv74j/a_fun_10_min_talk_allison_kaptur_limitless_and/",
          "locked": false,
          "name": "t3_4xv74j",
          "created": 1471316482,
          "url": "https://www.youtube.com/attribution_link?a=cRpuSz2ZvI8&amp;u=%2Fwatch%3Fv%3DQk1I6ZxcceU%26feature%3Dshare",
          "author_flair_text": null,
          "quarantine": false,
          "title": "A fun 10 min talk: Allison Kaptur: Limitless and recursion-free recursion limits!",
          "created_utc": 1471287682,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "youtube.com",
          "banned_by": null,
          "media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/pUWIDYHRuc4?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": {
            "type": "youtube.com",
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "version": "1.0",
              "title": "ADARA - Virtual Assistant (new GUI + Voice Recognition)",
              "type": "video",
              "thumbnail_width": 480,
              "height": 338,
              "width": 600,
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/pUWIDYHRuc4?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "author_name": "KA1N",
              "thumbnail_height": 360,
              "thumbnail_url": "https://i.ytimg.com/vi/pUWIDYHRuc4/hqdefault.jpg",
              "provider_name": "YouTube",
              "author_url": "https://www.youtube.com/channel/UCdR-2XOv04jy5Q7yJSdcjVg"
            }
          },
          "link_flair_text": null,
          "id": "4xt19h",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "ExoHuman15",
          "media": {
            "type": "youtube.com",
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "version": "1.0",
              "title": "ADARA - Virtual Assistant (new GUI + Voice Recognition)",
              "type": "video",
              "thumbnail_width": 480,
              "height": 338,
              "width": 600,
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/pUWIDYHRuc4?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "author_name": "KA1N",
              "thumbnail_height": 360,
              "thumbnail_url": "https://i.ytimg.com/vi/pUWIDYHRuc4/hqdefault.jpg",
              "provider_name": "YouTube",
              "author_url": "https://www.youtube.com/channel/UCdR-2XOv04jy5Q7yJSdcjVg"
            }
          },
          "score": 4,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/pUWIDYHRuc4?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xt19h/demonstration_of_adara_my_virtual_assistant_that/",
          "locked": false,
          "name": "t3_4xt19h",
          "created": 1471287387,
          "url": "https://www.youtube.com/watch?v=pUWIDYHRuc4",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Demonstration of ADARA, my virtual assistant that I've been working on for about a month now using Python.",
          "created_utc": 1471258587,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 4
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "jimmycallin.github.io",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xs2jj",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "onewugtwowugs",
          "media": null,
          "score": 7,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 8,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xs2jj/how_can_early_monthly_saving_affect_your_later/",
          "locked": false,
          "name": "t3_4xs2jj",
          "created": 1471266383,
          "url": "https://jimmycallin.github.io/2016/08/14/cumulative-rate/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "How can early monthly saving affect your later life? (A small experiment using Python)",
          "created_utc": 1471237583,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 7
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "glyph.twistedmatrix.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xnip4",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "Lukasa",
          "media": null,
          "score": 317,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 137,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": "",
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xnip4/python_packaging_is_good_now/",
          "locked": false,
          "name": "t3_4xnip4",
          "created": 1471195941,
          "url": "https://glyph.twistedmatrix.com/2016/08/python-packaging.html",
          "author_flair_text": "Hyper, Requests, Twisted",
          "quarantine": false,
          "title": "Python Packaging Is Good Now",
          "created_utc": 1471167141,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 317
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "blog.jupyter.org",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xoelo",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "__ah",
          "media": null,
          "score": 96,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 6,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xoelo/jupyterlab_the_next_generation_of_the_jupyter/",
          "locked": false,
          "name": "t3_4xoelo",
          "created": 1471215197,
          "url": "http://blog.jupyter.org/2016/07/14/jupyter-lab-alpha/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "JupyterLab: the next generation of the Jupyter Notebook [X-Post /r/machinelearning]",
          "created_utc": 1471186397,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 96
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Have any of you taken either the Fundamentals of Computing Specialization (Rice U) or the Python for Everybody Specialization (U of Mich)? If so, could you offer any insights?  Im a complete programming noob, but am really interested in learning! Any help would be greatly appreciated :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Have any of you taken either the Fundamentals of Computing Specialization (Rice U) or the Python for Everybody Specialization (U of Mich)? If so, could you offer any insights?  Im a complete programming noob, but am really interested in learning! Any help would be greatly appreciated :)",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xu3h9",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "rkooms",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xu3h9/question_for_python_mooc_users_coursera/",
          "locked": false,
          "name": "t3_4xu3h9",
          "created": 1471303756,
          "url": "https://www.reddit.com/r/Python/comments/4xu3h9/question_for_python_mooc_users_coursera/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Question for Python MOOC users (Coursera Specializations)",
          "created_utc": 1471274956,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello,&lt;/p&gt;\n\n&lt;p&gt;I made Yahtzee with Pyhton (single-player). The language of the game is currently is Dutch but if the code is fully optimised it will be translated to English. visit: &lt;a href=\"https://github.com/1420194speck/Python\"&gt;https://github.com/1420194speck/Python&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you got remarks on the code, send me a PM or lets discuss it in public :)&lt;/p&gt;\n\n&lt;p&gt;Looking forward for your comments!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hello,\n\nI made Yahtzee with Pyhton (single-player). The language of the game is currently is Dutch but if the code is fully optimised it will be translated to English. visit: https://github.com/1420194speck/Python\n\nIf you got remarks on the code, send me a PM or lets discuss it in public :)\n\nLooking forward for your comments!",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xte4j",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "sebastiaanspeck",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 7,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xte4j/yahtzee_game_dutch/",
          "locked": false,
          "name": "t3_4xte4j",
          "created": 1471294270,
          "url": "https://www.reddit.com/r/Python/comments/4xte4j/yahtzee_game_dutch/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Yahtzee game (Dutch)",
          "created_utc": 1471265470,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xp3q6",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "IronManMark20",
          "media": null,
          "score": 32,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 12,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": "",
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xp3q6/pyhooked_a_pure_python_hotkey_module_for_windows/",
          "locked": false,
          "name": "t3_4xp3q6",
          "created": 1471224908,
          "url": "https://github.com/ethanhs/pyhooked",
          "author_flair_text": "PySide 2",
          "quarantine": false,
          "title": "pyhooked, a pure Python hotkey module for Windows, hits version 0.8 with a complete re-write.",
          "created_utc": 1471196108,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 32
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Especially to someone who is new to programming. Thanks :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Especially to someone who is new to programming. Thanks :)",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xu9r9",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "rkooms",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xu9r9/which_mooconline_courae_is_the_best_to_learn/",
          "locked": false,
          "name": "t3_4xu9r9",
          "created": 1471305798,
          "url": "https://www.reddit.com/r/Python/comments/4xu9r9/which_mooconline_courae_is_the_best_to_learn/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Which MOOC/Online Courae is the best to learn python?",
          "created_utc": 1471276998,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So as the title says I&amp;#39;m about 70% complete on the python course but I&amp;#39;m finding I&amp;#39;m not understanding the later tasks or I am understanding them but not able to write them on my own without looking for help like I was with the earlier tasks.&lt;/p&gt;\n\n&lt;p&gt;My questions is what are some good beginner projects to do to learn python or how are some ways you were able to learn python effectively because I felt like I was breezing through the basics but now hit a wall? :/&lt;/p&gt;\n\n&lt;p&gt;Will post this in &lt;a href=\"http://www.reddit.com/r/learnpython\"&gt;http://www.reddit.com/r/learnpython&lt;/a&gt; in case this gets removed since I&amp;#39;m not sure if it falls within the question rules.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "So as the title says I'm about 70% complete on the python course but I'm finding I'm not understanding the later tasks or I am understanding them but not able to write them on my own without looking for help like I was with the earlier tasks.\n\nMy questions is what are some good beginner projects to do to learn python or how are some ways you were able to learn python effectively because I felt like I was breezing through the basics but now hit a wall? :/\n\nWill post this in http://www.reddit.com/r/learnpython in case this gets removed since I'm not sure if it falls within the question rules.\n",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xtiu9",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "AfroLouis",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 4,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xtiu9/python_beginner_70_through_codecademy_python/",
          "locked": false,
          "name": "t3_4xtiu9",
          "created": 1471296285,
          "url": "https://www.reddit.com/r/Python/comments/4xtiu9/python_beginner_70_through_codecademy_python/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Python beginner 70% through codecademy python course but need to practice basics help please",
          "created_utc": 1471267485,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "i.redd.it",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xnfos",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "prickneck",
          "media": null,
          "score": 51,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 14,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xnfos/the_online_study_will_take_less_than_60_minutes/",
          "locked": false,
          "name": "t3_4xnfos",
          "created": 1471193642,
          "url": "https://i.redd.it/b6vnkhmuabfx.png",
          "author_flair_text": null,
          "quarantine": false,
          "title": "\"The online study will take less than 60 minutes to complete.\" Good luck with that...",
          "created_utc": 1471164842,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 51
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "mediafire.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xtsvc",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "CommandMaestro",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xtsvc/program_to_left_shift_bits_enter_numbers_in/",
          "locked": false,
          "name": "t3_4xtsvc",
          "created": 1471300097,
          "url": "http://www.mediafire.com/download/cec0p4cxri27jne/Left_Shift.py",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Program to left shift bits (enter numbers in decimal)",
          "created_utc": 1471271297,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;As a python beginner but acquainted with other programming languages I find infuriating how bad is the official python documentation. &lt;/p&gt;\n\n&lt;p&gt;How come nobody came up with the idea to put a simple function signature for every built-in python function (like C, Java)? Why do I have to read the whole function description to understand (if I&amp;#39;m lucky) what the function returns? And why  are the examples overly complicated (easy examples with comments in the code to indicate what a function returns or prints as php docs do would be great)?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "As a python beginner but acquainted with other programming languages I find infuriating how bad is the official python documentation. \n\nHow come nobody came up with the idea to put a simple function signature for every built-in python function (like C, Java)? Why do I have to read the whole function description to understand (if I'm lucky) what the function returns? And why  are the examples overly complicated (easy examples with comments in the code to indicate what a function returns or prints as php docs do would be great)?",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xtwx9",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "Kwbmm",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 28,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xtwx9/why_is_python_documentation_so_bad_and_why_is_no/",
          "locked": false,
          "name": "t3_4xtwx9",
          "created": 1471301576,
          "url": "https://www.reddit.com/r/Python/comments/4xtwx9/why_is_python_documentation_so_bad_and_why_is_no/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Why is python documentation so bad and why is no one doing anything to amend it?",
          "created_utc": 1471272776,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "youtube.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xng7o",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "bakery2k",
          "media": null,
          "score": 27,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xng7o/micropython_a_journey_from_kickstarter_to_space/",
          "locked": false,
          "name": "t3_4xng7o",
          "created": 1471194009,
          "url": "https://www.youtube.com/watch?v=Zm08hXeuv-I",
          "author_flair_text": null,
          "quarantine": false,
          "title": "MicroPython: a journey from Kickstarter to Space",
          "created_utc": 1471165209,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 27
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "medium.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xp00c",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "iankit",
          "media": null,
          "score": 6,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xp00c/list_of_stackoverflow_questions_for_deeper/",
          "locked": false,
          "name": "t3_4xp00c",
          "created": 1471223538,
          "url": "https://medium.com/pyankit/8-stackoverflow-threads-to-read-for-deeper-understanding-of-python-327586bcb303#.gkj8nbfkg",
          "author_flair_text": null,
          "quarantine": false,
          "title": "List of Stackoverflow questions for deeper understanding of python",
          "created_utc": 1471194738,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 6
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi. I recently published my first book. It&amp;#39;s about web application development in Django and I&amp;#39;d love it if you guys could check it out and give me some feedback on it.&lt;/p&gt;\n\n&lt;p&gt;You can find it on Amazon &lt;a href=\"https://www.amazon.com/Django-Project-Blueprints-Jibran-Ahmed/dp/1783985429/\"&gt;https://www.amazon.com/Django-Project-Blueprints-Jibran-Ahmed/dp/1783985429/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: To give you guys more context, here is a list of the chapters and the things they cover:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;A blog application that introduces the reader to basics of Django. Creating models, views, templates. Nothing fancy.&lt;/li&gt;\n&lt;li&gt;A Hacker News inspired link sharing site that shows the reader how to rank the submissions with a &lt;em&gt;very&lt;/em&gt; basic ranking method. Introduces users to model concepts like self-referential (recursive) foreign keys, and queryset methods.&lt;/li&gt;\n&lt;li&gt;A Nagios inspired web application with an API to get updates on data-metrics from monitored nodes. Introduces advanced ORM concepts like &lt;code&gt;distinct()&lt;/code&gt; queries.&lt;/li&gt;\n&lt;li&gt;A basic app that introduces readers to the Django admin app, and how to customise it.&lt;/li&gt;\n&lt;li&gt;Walks the users through creating a basic multi-lingual app using Django translation utilities. Also shows something different than most translation tutorials and tells the reader how to add translation capabilities to models and user generated content.&lt;/li&gt;\n&lt;li&gt;An advanced app that shows the user how to use Elasticsearch and integrate it with Django using the &lt;code&gt;elasticsearch_dsl&lt;/code&gt; library.&lt;/li&gt;\n&lt;li&gt;This one feels like a bonus chapter. It shows the reader how Django forms work below the surface, and how to create dynamic forms.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hi. I recently published my first book. It's about web application development in Django and I'd love it if you guys could check it out and give me some feedback on it.\n\nYou can find it on Amazon https://www.amazon.com/Django-Project-Blueprints-Jibran-Ahmed/dp/1783985429/.\n\n*Edit*: To give you guys more context, here is a list of the chapters and the things they cover:\n\n1. A blog application that introduces the reader to basics of Django. Creating models, views, templates. Nothing fancy.\n2. A Hacker News inspired link sharing site that shows the reader how to rank the submissions with a *very* basic ranking method. Introduces users to model concepts like self-referential (recursive) foreign keys, and queryset methods.\n3. A Nagios inspired web application with an API to get updates on data-metrics from monitored nodes. Introduces advanced ORM concepts like `distinct()` queries.\n4. A basic app that introduces readers to the Django admin app, and how to customise it.\n5. Walks the users through creating a basic multi-lingual app using Django translation utilities. Also shows something different than most translation tutorials and tells the reader how to add translation capabilities to models and user generated content.\n6. An advanced app that shows the user how to use Elasticsearch and integrate it with Django using the `elasticsearch_dsl` library.\n7. This one feels like a bonus chapter. It shows the reader how Django forms work below the surface, and how to create dynamic forms.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xs9tx",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "confused_banda",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 13,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": 1471275046,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xs9tx/i_just_published_my_first_book_on_django_web/",
          "locked": false,
          "name": "t3_4xs9tx",
          "created": 1471270423,
          "url": "https://www.reddit.com/r/Python/comments/4xs9tx/i_just_published_my_first_book_on_django_web/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "I just published my first book on Django web applications and would love feedback from you guys!",
          "created_utc": 1471241623,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "learning-python.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xnta2",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "bakery2k",
          "media": null,
          "score": 12,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 7,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xnta2/python_changes_2014_by_mark_lutz_author_of/",
          "locked": false,
          "name": "t3_4xnta2",
          "created": 1471204379,
          "url": "http://learning-python.com/books/python-changes-2014-plus.html",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Python Changes 2014+, by Mark Lutz (author of Learning Python &amp; Programming Python)",
          "created_utc": 1471175579,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 12
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xqw2c",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "juanpabloaj",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xqw2c/a_command_line_tool_for_searching_in_omdb/",
          "locked": false,
          "name": "t3_4xqw2c",
          "created": 1471248676,
          "url": "https://github.com/juanpabloaj/omdb-cli",
          "author_flair_text": null,
          "quarantine": false,
          "title": "A command line tool for searching in omdb",
          "created_utc": 1471219876,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "youtube.com",
          "banned_by": null,
          "media_embed": {
            "content": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FSzPSA_qZfuA%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DSzPSA_qZfuA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FSzPSA_qZfuA%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "description": "Daniele Procida - Minds, machines and Python [EuroPython 2016] [19 July 2016] [Bilbao, Euskadi, Spain] (https://ep2016.europython.eu//conference/talks/minds-machines-and-python) Are we looking in the wrong direction for artificial intelligence and machine learning? I'll discuss an older but perhaps more satisfying approach, that has been neglected in recent years.",
              "title": "Daniele Procida - Minds, machines and Python",
              "url": "http://www.youtube.com/watch?v=SzPSA_qZfuA",
              "type": "video",
              "author_name": "EuroPython Conference",
              "height": 338,
              "width": 600,
              "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FSzPSA_qZfuA%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DSzPSA_qZfuA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FSzPSA_qZfuA%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "version": "1.0",
              "provider_name": "YouTube",
              "thumbnail_url": "https://i.embed.ly/1/image?url=https%3A%2F%2Fi.ytimg.com%2Fvi%2FSzPSA_qZfuA%2Fhqdefault.jpg&amp;key=b1e305db91cf4aa5a86b732cc9fffceb",
              "thumbnail_height": 360,
              "author_url": "https://www.youtube.com/user/PythonItalia"
            },
            "type": "youtube.com"
          },
          "link_flair_text": null,
          "id": "4xqtig",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "jalanb",
          "media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "description": "Daniele Procida - Minds, machines and Python [EuroPython 2016] [19 July 2016] [Bilbao, Euskadi, Spain] (https://ep2016.europython.eu//conference/talks/minds-machines-and-python) Are we looking in the wrong direction for artificial intelligence and machine learning? I'll discuss an older but perhaps more satisfying approach, that has been neglected in recent years.",
              "title": "Daniele Procida - Minds, machines and Python",
              "url": "http://www.youtube.com/watch?v=SzPSA_qZfuA",
              "type": "video",
              "author_name": "EuroPython Conference",
              "height": 338,
              "width": 600,
              "html": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FSzPSA_qZfuA%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DSzPSA_qZfuA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FSzPSA_qZfuA%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "version": "1.0",
              "provider_name": "YouTube",
              "thumbnail_url": "https://i.ytimg.com/vi/SzPSA_qZfuA/hqdefault.jpg",
              "thumbnail_height": 360,
              "author_url": "https://www.youtube.com/user/PythonItalia"
            },
            "type": "youtube.com"
          },
          "score": 3,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {
            "content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FSzPSA_qZfuA%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DSzPSA_qZfuA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FSzPSA_qZfuA%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xqtig/daniele_procida_minds_machines_and_python/",
          "locked": false,
          "name": "t3_4xqtig",
          "created": 1471247726,
          "url": "https://www.youtube.com/attribution_link?a=0bSrn6092p8&amp;u=%2Fwatch%3Fv%3DSzPSA_qZfuA%26feature%3Dshare",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Daniele Procida - Minds, machines and Python",
          "created_utc": 1471218926,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 3
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "inferentialthinking.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xln3q",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "yaph",
          "media": null,
          "score": 83,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 2,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xln3q/computational_and_inferential_thinking_the/",
          "locked": false,
          "name": "t3_4xln3q",
          "created": 1471160281,
          "url": "http://www.inferentialthinking.com/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Computational and Inferential Thinking - The Foundations of Data Science",
          "created_utc": 1471131481,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 83
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "techbeamers.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xmp2j",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "TechBeamers",
          "media": null,
          "score": 17,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xmp2j/python_exception_handling_tutorial_and_examples/",
          "locked": false,
          "name": "t3_4xmp2j",
          "created": 1471177164,
          "url": "http://www.techbeamers.com/python-exception-handling-tutorial-examples/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Python Exception Handling Tutorial and Examples for Beginners",
          "created_utc": 1471148364,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 17
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "morepypy.blogspot.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xlb0k",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "mikolaj",
          "media": null,
          "score": 38,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 2,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xlb0k/pypy_status_blog_pypy_tooling_upgrade_jitviewer/",
          "locked": false,
          "name": "t3_4xlb0k",
          "created": 1471155345,
          "url": "https://morepypy.blogspot.com/2016/08/pypy-tooling-upgrade-jitviewer-and.html",
          "author_flair_text": null,
          "quarantine": false,
          "title": "PyPy Status Blog: PyPy Tooling Upgrade: JitViewer and VMProf",
          "created_utc": 1471126545,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 38
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I&amp;#39;ve attempted to make a kik bot in python with kik api, but when I was trying this I couldn&amp;#39;t find out how to get the proper chat id needed to send a message with json and the kik api, all help is appreciated, here is my code: &lt;a href=\"http://pastebin.com/LP8ahhhd\"&gt;http://pastebin.com/LP8ahhhd&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hello, I've attempted to make a kik bot in python with kik api, but when I was trying this I couldn't find out how to get the proper chat id needed to send a message with json and the kik api, all help is appreciated, here is my code: http://pastebin.com/LP8ahhhd",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xrpku",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "grodobean",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xrpku/how_to_get_kik_bot_api_chat_id/",
          "locked": false,
          "name": "t3_4xrpku",
          "created": 1471260511,
          "url": "https://www.reddit.com/r/Python/comments/4xrpku/how_to_get_kik_bot_api_chat_id/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "How to get Kik bot api chat_id.",
          "created_utc": 1471231711,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "adilmoujahid.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xiorx",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "adilmoujahid",
          "media": null,
          "score": 154,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 8,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xiorx/interactive_data_visualization_of_geospatial_data/",
          "locked": false,
          "name": "t3_4xiorx",
          "created": 1471116136,
          "url": "http://adilmoujahid.com/posts/2016/08/interactive-data-visualization-geospatial-d3-dc-leaflet-python/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Interactive Data Visualization of Geospatial Data using D3.js, DC.js, Leaflet.js and Python",
          "created_utc": 1471087336,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 154
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For the last year I have been building Toby my personal assistant which has features of chatbot, deep learning and a large range of other typical features seen in other assistants.&lt;/p&gt;\n\n&lt;p&gt;I am currently building a developer portal to allow other developers to easily create &amp;quot;brain cells&amp;quot; for Toby. If you would like to be involved please leave a comment.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "For the last year I have been building Toby my personal assistant which has features of chatbot, deep learning and a large range of other typical features seen in other assistants.\n\nI am currently building a developer portal to allow other developers to easily create \"brain cells\" for Toby. If you would like to be involved please leave a comment.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xq7kz",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "fulleylove",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 6,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xq7kz/toby_a_python_ai_assistant/",
          "locked": false,
          "name": "t3_4xq7kz",
          "created": 1471239318,
          "url": "https://www.reddit.com/r/Python/comments/4xq7kz/toby_a_python_ai_assistant/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Toby a Python AI Assistant",
          "created_utc": 1471210518,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "landinghub.visualstudio.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xk1aj",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "denfromufa",
          "media": null,
          "score": 34,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 9,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xk1aj/visual_c_build_tools_for_python_35_cython_nodejs/",
          "locked": false,
          "name": "t3_4xk1aj",
          "created": 1471137991,
          "url": "http://landinghub.visualstudio.com/visual-cpp-build-tools",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Visual C++ Build Tools for Python 3.5+, Cython, Node.JS, Rust",
          "created_utc": 1471109191,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 34
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I usually add a block of codes with the &amp;quot;if &lt;strong&gt;name&lt;/strong&gt; == &amp;#39;&lt;strong&gt;main&lt;/strong&gt;&amp;#39; &amp;quot; trick at the end of my module code file. I can just run the file to see if the added new code in the module itself, perhaps just a few lines, is doing what is expected. If I need to go back and change code in the module I don&amp;#39;t need to re-start the python kernel in this way.&lt;/p&gt;\n\n&lt;p&gt;But I often find as I making progress of writing up the module, I need to change A LOT of code in the &amp;quot;if &lt;strong&gt;name&lt;/strong&gt; == &amp;#39;&lt;strong&gt;main&lt;/strong&gt;&amp;#39; &amp;quot; blocks to test added module code as well.&lt;/p&gt;\n\n&lt;p&gt;I looked in to unittest, but that seems like a comprehensive testing AFTER the module is completed. so I am just wondering for those professional programmers, what is your approach or tricks of testing modules codes while you are writing it.&lt;/p&gt;\n\n&lt;p&gt;Thx!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I usually add a block of codes with the \"if __name__ == '__main__' \" trick at the end of my module code file. I can just run the file to see if the added new code in the module itself, perhaps just a few lines, is doing what is expected. If I need to go back and change code in the module I don't need to re-start the python kernel in this way.\n\nBut I often find as I making progress of writing up the module, I need to change A LOT of code in the \"if __name__ == '__main__' \" blocks to test added module code as well.\n\nI looked in to unittest, but that seems like a comprehensive testing AFTER the module is completed. so I am just wondering for those professional programmers, what is your approach or tricks of testing modules codes while you are writing it.\n\nThx!",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xmpd4",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "JG52",
          "media": null,
          "score": 2,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 11,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xmpd4/professional_python_developers_what_is_your/",
          "locked": false,
          "name": "t3_4xmpd4",
          "created": 1471177307,
          "url": "https://www.reddit.com/r/Python/comments/4xmpd4/professional_python_developers_what_is_your/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Professional python developers, what is your approach of writing/testing a module?",
          "created_utc": 1471148507,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 2
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xkoaj",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "elchicharo",
          "media": null,
          "score": 9,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xkoaj/project_looking_for_new_maintainer_djangojsonfield/",
          "locked": false,
          "name": "t3_4xkoaj",
          "created": 1471146553,
          "url": "https://github.com/bradjasper/django-jsonfield/issues/146",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Project Looking for new maintainer django-jsonfield",
          "created_utc": 1471117753,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 9
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have been trying to install &lt;a href=\"https://github.com/ellisonbg/altair/\"&gt;altair&lt;/a&gt; pip works perfectly, but jupyter notebook won&amp;#39;t install the nbextension required for this package to work on it.&lt;/p&gt;\n\n&lt;p&gt;I get the following error: [InstallNBExtensionApp] CRITICAL | Bad config encountered during initialization: [InstallNBExtensionApp] CRITICAL | Unrecognized flag: &amp;#39;--sys-prefix&amp;#39;&lt;/p&gt;\n\n&lt;p&gt;Can someone please help me?&lt;/p&gt;\n\n&lt;p&gt;TIA :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I have been trying to install [altair](https://github.com/ellisonbg/altair/) pip works perfectly, but jupyter notebook won't install the nbextension required for this package to work on it.\n\nI get the following error: [InstallNBExtensionApp] CRITICAL | Bad config encountered during initialization: [InstallNBExtensionApp] CRITICAL | Unrecognized flag: '--sys-prefix'\n\nCan someone please help me?\n\nTIA :)",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xnzfq",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "vaibhavs10",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xnzfq/installing_altair_statistical_visualisation/",
          "locked": false,
          "name": "t3_4xnzfq",
          "created": 1471208064,
          "url": "https://www.reddit.com/r/Python/comments/4xnzfq/installing_altair_statistical_visualisation/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Installing altair: statistical visualisation package, jupyter notebook won't render",
          "created_utc": 1471179264,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "johnwittenauer.net",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xgtpo",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "unkz",
          "media": null,
          "score": 203,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 6,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xgtpo/andrew_ngs_machine_learning_exercises_in_python/",
          "locked": false,
          "name": "t3_4xgtpo",
          "created": 1471078380,
          "url": "http://www.johnwittenauer.net/machine-learning-exercises-in-python-part-1/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Andrew Ng's Machine Learning Exercises In Python",
          "created_utc": 1471049580,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 203
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m training my neural network to recognise printed characters and the process is taking quite a while.&lt;br/&gt;\nHere is where I got the code from for the neural network.&lt;br/&gt;\n&lt;a href=\"https://github.com/mnielsen/neural-networks-and-deep-learning\"&gt;https://github.com/mnielsen/neural-networks-and-deep-learning&lt;/a&gt;&lt;br/&gt;\nI&amp;#39;m using network2.py. Network 3.py (which uses GPU) wont run for some reason.&lt;br/&gt;\nHere is where I got the code from for the neural network.&lt;br/&gt;\n&lt;a href=\"https://github.com/mnielsen/neural-networks-and-deep-learning\"&gt;https://github.com/mnielsen/neural-networks-and-deep-learning&lt;/a&gt;&lt;br/&gt;\nI&amp;#39;m using network2.py. Network 3.py (which uses GPU) wont run for some reason.&lt;br/&gt;\nHere&amp;#39;s what I get:&lt;br/&gt;\n    WARNING (theano.configdefaults): g++ not detected ! Theano will be unable to execute optimized C-implementations (for both CPU and GPU) and will default to Python implementations. Performance will be severely degraded. To remove this warning, set Theano flags cxx to an empty string.\n    C:\\Python27\\lib\\site-packages\\theano\\tensor\\signal\\downsample.py:6: UserWarning: downsample module has been moved to the theano.tensor.signal.pool module.&lt;br/&gt;\n      &amp;quot;downsample module has been moved to the theano.tensor.signal.pool module.&amp;quot;)&lt;br/&gt;\n    Trying to run under a GPU.  If this is not desired, then modify network3.py\nto set the GPU flag to False.&lt;br/&gt;\n.&lt;br/&gt;\n.&lt;br/&gt;\nHow do I run network2.py on the GPU with the least amount of modification to my code? Is there a flag I can enable that will just use the GPU?&lt;br/&gt;\nI&amp;#39;m a newbie so simple explanations would be really appreciated.&lt;br/&gt;\nEDIT: Added the error code.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I'm training my neural network to recognise printed characters and the process is taking quite a while.  \nHere is where I got the code from for the neural network.  \nhttps://github.com/mnielsen/neural-networks-and-deep-learning  \nI'm using network2.py. Network 3.py (which uses GPU) wont run for some reason.  \nHere is where I got the code from for the neural network.  \nhttps://github.com/mnielsen/neural-networks-and-deep-learning  \nI'm using network2.py. Network 3.py (which uses GPU) wont run for some reason.  \nHere's what I get:  \n    WARNING (theano.configdefaults): g++ not detected ! Theano will be unable to execute optimized C-implementations (for both CPU and GPU) and will default to Python implementations. Performance will be severely degraded. To remove this warning, set Theano flags cxx to an empty string.\n    C:\\Python27\\lib\\site-packages\\theano\\tensor\\signal\\downsample.py:6: UserWarning: downsample module has been moved to the theano.tensor.signal.pool module.  \n      \"downsample module has been moved to the theano.tensor.signal.pool module.\")  \n    Trying to run under a GPU.  If this is not desired, then modify network3.py\nto set the GPU flag to False.  \n.  \n.  \nHow do I run network2.py on the GPU with the least amount of modification to my code? Is there a flag I can enable that will just use the GPU?  \nI'm a newbie so simple explanations would be really appreciated.  \nEDIT: Added the error code.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xnn2s",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "niankaki",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 6,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": 1471177936,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xnn2s/how_do_i_run_my_python_code_in_the_gpu/",
          "locked": false,
          "name": "t3_4xnn2s",
          "created": 1471199526,
          "url": "https://www.reddit.com/r/Python/comments/4xnn2s/how_do_i_run_my_python_code_in_the_gpu/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "How do I run my python code in the GPU.",
          "created_utc": 1471170726,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, \nIf You work as a python programmer, please describe Your day at work. I mean something like task examples etc. \nThank You &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hello, \nIf You work as a python programmer, please describe Your day at work. I mean something like task examples etc. \nThank You ",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xjjmj",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "readerpl",
          "media": null,
          "score": 7,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 16,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xjjmj/if_you_work_as_a_python_programmer_please/",
          "locked": false,
          "name": "t3_4xjjmj",
          "created": 1471131341,
          "url": "https://www.reddit.com/r/Python/comments/4xjjmj/if_you_work_as_a_python_programmer_please/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "If You work as a python programmer, please describe Your day at work",
          "created_utc": 1471102541,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 7
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "maateen.me",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xjvqo",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "ugcoder",
          "media": null,
          "score": 6,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 3,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xjvqo/data_structures_and_algorithms_i_should_know/",
          "locked": false,
          "name": "t3_4xjvqo",
          "created": 1471135958,
          "url": "http://maateen.me/data-structures-and-algorithms/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Data Structures and Algorithms I should know",
          "created_utc": 1471107158,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 6
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "mdctechietips.blogspot.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xnq7c",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "mikeydc8990",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xnq7c/python_programming_introductory_tutorial/",
          "locked": false,
          "name": "t3_4xnq7c",
          "created": 1471202092,
          "url": "http://mdctechietips.blogspot.com/2016/08/python-programming-introduction.html",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Python Programming Introductory Tutorial",
          "created_utc": 1471173292,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was just noticing that only 19 projects are tagged as open to newbs on up-for-grabs. \n&lt;a href=\"http://up-for-grabs.net/#/tags/python\"&gt;http://up-for-grabs.net/#/tags/python&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Since the the Python community also strives to be very open and inclusive I could see embracing that tag. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I was just noticing that only 19 projects are tagged as open to newbs on up-for-grabs. \nhttp://up-for-grabs.net/#/tags/python\n\nSince the the Python community also strives to be very open and inclusive I could see embracing that tag. ",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xkv6z",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "elchicharo",
          "media": null,
          "score": 2,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 2,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xkv6z/very_few_python_projects_tagged_as_open_to_newbs/",
          "locked": false,
          "name": "t3_4xkv6z",
          "created": 1471149215,
          "url": "https://www.reddit.com/r/Python/comments/4xkv6z/very_few_python_projects_tagged_as_open_to_newbs/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Very few Python Projects tagged as open to newbs",
          "created_utc": 1471120415,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 2
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I need to write a script that executes the same action on a web site (multiple pages) across several hundred accounts. I&amp;#39;m aware how simple this is, in terms of sending GET/POST requests, but where do I start and how do I implement it with Python?&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m extremely comfortable with the language, so lay it on me.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I need to write a script that executes the same action on a web site (multiple pages) across several hundred accounts. I'm aware how simple this is, in terms of sending GET/POST requests, but where do I start and how do I implement it with Python?\n\nI'm extremely comfortable with the language, so lay it on me.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xjwpn",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "FR_STARMER",
          "media": null,
          "score": 3,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 5,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xjwpn/creating_a_script_that_logs_in_does_something/",
          "locked": false,
          "name": "t3_4xjwpn",
          "created": 1471136305,
          "url": "https://www.reddit.com/r/Python/comments/4xjwpn/creating_a_script_that_logs_in_does_something/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Creating a script that logs in, does something, logs out, and goes onto the next account.",
          "created_utc": 1471107505,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 3
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xkw47",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "farebord",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 5,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xkw47/question_are_there_any_tools_that_can_pack/",
          "locked": false,
          "name": "t3_4xkw47",
          "created": 1471149577,
          "url": "https://www.reddit.com/r/Python/comments/4xkw47/question_are_there_any_tools_that_can_pack/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "[Question] Are there any tools that can pack javascript like webpack, task manager that can replace grunt/gulp?",
          "created_utc": 1471120777,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "reddit.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xcw9z",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "spegi",
          "media": null,
          "score": 438,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 57,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xcw9z/rpython_is_trending/",
          "locked": false,
          "name": "t3_4xcw9z",
          "created": 1471027194,
          "url": "https://www.reddit.com/r/trendingsubreddits/comments/4xcc4s/trending_subreddits_for_20160812_rcombatfootage/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "/r/Python is trending!",
          "created_utc": 1470998394,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 438
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "glyph.twistedmatrix.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xf5n2",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "mayankkaizen",
          "media": null,
          "score": 90,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 67,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xf5n2/the_one_python_library_everyone_needs/",
          "locked": false,
          "name": "t3_4xf5n2",
          "created": 1471056763,
          "url": "https://glyph.twistedmatrix.com/2016/08/attrs.html?utm_source=twitterfeed&amp;utm_medium=twitter",
          "author_flair_text": null,
          "quarantine": false,
          "title": "The One Python Library Everyone Needs",
          "created_utc": 1471027963,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 90
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So, I have a py script I want to transform in an .exe.\nThe imports in the source file are:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from docx import Document\nfrom docx.enum.style import WD_STYLE_TYPE\nfrom docx.enum.text import WD_ALIGN_PARAGRAPH, WD_BREAK_TYPE\nfrom docx.shared import Cm\nimport requests, os, bs4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;when I use pyinstaller myscript.py the .exe generated doesn&amp;#39;t work and in the warnscript file there&amp;#39;s a lots of lines like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;missing module named ndg.SUBJ_ALT_NAME_SUPPORT - imported by ndg, requests.packages.urllib3.contrib.pyopenssl\nmissing module named ndg - imported by requests.packages.urllib3.contrib.pyopenssl\nmissing module named docx.enum.text.WD_ALIGN_PARAGRAPH - imported by docx.enum.text, docx.oxml.text.parfmt, C:\\Users\\Snakethesniper\\Documents\\Python\\lista.py\nmissing module named docx.enum.text.WD_COLOR - imported by docx.enum.text, docx.oxml.text.font\nmissing module named docx.enum.dml.MSO_THEME_COLOR - imported by docx.enum.dml, docx.oxml.text.font\nmissing module named docx.oxml.parse_xml - imported by docx.oxml, docx.oxml.coreprops, docx.oxml.shape, docx.oxml.table, docx.oxml.text.font, docx.opc.part, docx.parts.settings, docx.parts.styles\nmissing module named docx.enum.section.WD_SECTION - imported by docx.enum.section, docx.document\nmissing module named docx.oxml.OxmlElement - imported by docx.oxml, docx.oxml.shared, docx.oxml.xmlchemy, docx.oxml.numbering\nmissing module named docx.image.SIGNATURES - imported by docx.image, docx.image.image\nmissing module named docx.blkcntnr.BlockItemContainer - imported by docx.blkcntnr, docx.table, docx.document[/code]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How can I solve this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "So, I have a py script I want to transform in an .exe.\nThe imports in the source file are:\n\n    from docx import Document\n    from docx.enum.style import WD_STYLE_TYPE\n    from docx.enum.text import WD_ALIGN_PARAGRAPH, WD_BREAK_TYPE\n    from docx.shared import Cm\n    import requests, os, bs4\nwhen I use pyinstaller myscript.py the .exe generated doesn't work and in the warnscript file there's a lots of lines like:\n\n    missing module named ndg.SUBJ_ALT_NAME_SUPPORT - imported by ndg, requests.packages.urllib3.contrib.pyopenssl\n    missing module named ndg - imported by requests.packages.urllib3.contrib.pyopenssl\n    missing module named docx.enum.text.WD_ALIGN_PARAGRAPH - imported by docx.enum.text, docx.oxml.text.parfmt, C:\\Users\\Snakethesniper\\Documents\\Python\\lista.py\n    missing module named docx.enum.text.WD_COLOR - imported by docx.enum.text, docx.oxml.text.font\n    missing module named docx.enum.dml.MSO_THEME_COLOR - imported by docx.enum.dml, docx.oxml.text.font\n    missing module named docx.oxml.parse_xml - imported by docx.oxml, docx.oxml.coreprops, docx.oxml.shape, docx.oxml.table, docx.oxml.text.font, docx.opc.part, docx.parts.settings, docx.parts.styles\n    missing module named docx.enum.section.WD_SECTION - imported by docx.enum.section, docx.document\n    missing module named docx.oxml.OxmlElement - imported by docx.oxml, docx.oxml.shared, docx.oxml.xmlchemy, docx.oxml.numbering\n    missing module named docx.image.SIGNATURES - imported by docx.image, docx.image.image\n    missing module named docx.blkcntnr.BlockItemContainer - imported by docx.blkcntnr, docx.table, docx.document[/code]\nHow can I solve this?",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xk19t",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "snakethesniper",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 4,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": 1471109588,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xk19t/problem_with_pyinstaller_and_modules/",
          "locked": false,
          "name": "t3_4xk19t",
          "created": 1471137983,
          "url": "https://www.reddit.com/r/Python/comments/4xk19t/problem_with_pyinstaller_and_modules/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Problem with pyinstaller and modules",
          "created_utc": 1471109183,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m a junior PhD student (orientation is Monday!) who is interested in compilers (or compiler-like-objects) and high performance computing.\nLong story short (read: I&amp;#39;m not giving away my position to anyone other than my colleagues), I&amp;#39;m interested in developing optimizations in python, via the interpreter.&lt;/p&gt;\n\n&lt;p&gt;How would one get involved in that?\nI know very little about the internals of the python interpreters and communities that support them.&lt;/p&gt;\n\n&lt;p&gt;I think the main question I have is: which interpreter (or compiler, if there exist any) is best to work on?&lt;/p&gt;\n\n&lt;p&gt;Best in my world looks something like:\n* Already gives good performance.\n* Has a internal framework that is designed to be used by outsiders (as opposed to frameworks designed for use only be core developers). \n* Documented enough for self-sufficient development.\n* Fully or almost fully python 2 or 3 compliant.&lt;/p&gt;\n\n&lt;p&gt;My current thoughts steer me to pypy (though, again, I don&amp;#39;t know what the internals or community look like) largely because I hear that fast.&lt;/p&gt;\n\n&lt;p&gt;Any input would be great!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I'm a junior PhD student (orientation is Monday!) who is interested in compilers (or compiler-like-objects) and high performance computing.\nLong story short (read: I'm not giving away my position to anyone other than my colleagues), I'm interested in developing optimizations in python, via the interpreter.\n\nHow would one get involved in that?\nI know very little about the internals of the python interpreters and communities that support them.\n\nI think the main question I have is: which interpreter (or compiler, if there exist any) is best to work on?\n\nBest in my world looks something like:\n* Already gives good performance.\n* Has a internal framework that is designed to be used by outsiders (as opposed to frameworks designed for use only be core developers). \n* Documented enough for self-sufficient development.\n* Fully or almost fully python 2 or 3 compliant.\n\nMy current thoughts steer me to pypy (though, again, I don't know what the internals or community look like) largely because I hear that fast.\n\nAny input would be great!",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xgiuj",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "thememorableusername",
          "media": null,
          "score": 7,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 10,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xgiuj/getting_involved_in_existing_python_interpreter/",
          "locked": false,
          "name": "t3_4xgiuj",
          "created": 1471073784,
          "url": "https://www.reddit.com/r/Python/comments/4xgiuj/getting_involved_in_existing_python_interpreter/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Getting involved in existing Python interpreter development",
          "created_utc": 1471044984,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 7
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xkcv5",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "NothungFancy",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 6,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xkcv5/because_of_work_i_couldnt_just_download_something/",
          "locked": false,
          "name": "t3_4xkcv5",
          "created": 1471142238,
          "url": "https://www.reddit.com/r/Python/comments/4xkcv5/because_of_work_i_couldnt_just_download_something/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Because of work, I couldn't just download something like Anaconda. It is a pain to pip each module, or find the wheel in a couple cases, but really not that hard. I know a lot of people like Anaconda but if you are wary of them, there is WinPython or Pyzo. Those come with everything you need.",
          "created_utc": 1471113438,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "raduangelescu.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xdixx",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "raduangelescu",
          "media": null,
          "score": 19,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 5,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xdixx/python_tumblr_artificial_artist_ai/",
          "locked": false,
          "name": "t3_4xdixx",
          "created": 1471037503,
          "url": "http://www.raduangelescu.com/artisticmachine42.html",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Python tumblr artificial artist (AI)",
          "created_utc": 1471008703,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 19
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I&amp;#39;m looking for some help from Python developers who write PyPI packages (or open source software that depends on PyPI packages). My research group is interested in the impacts of different choices package managers make when designing their ecosystems -- e.g. Python/PyPi, Hackage and R/CRAN. We&amp;#39;d like to know what the implications of PyPI&amp;#39;s design choices are on Python programmers&amp;#39; collaboration when making breaking changes among packages, and what you think PyPI&amp;#39;s design is trying to accomplish.&lt;/p&gt;\n\n&lt;p&gt;Could I ask people to take ~20 minutes of your time and fill out our survey at &lt;a href=\"http://breakingapis.org/survey\"&gt;http://breakingapis.org/survey&lt;/a&gt;? I&amp;#39;ll report back here when we&amp;#39;ve analyzed the results (or there&amp;#39;s a sign up link to be notified when results are out at &lt;a href=\"http://breakingapis.org\"&gt;http://breakingapis.org&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;(If you don&amp;#39;t use PyPI, but do use some other software ecosystem, like Node.js/NPM, CPAN, Erlang/Hex, or something else, we&amp;#39;re still interested -- just make a different &amp;quot;software ecosystem&amp;quot; choice on the first page. The study is a comparison among ecosystems; PyPI is one point of comparison).&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hi, I'm looking for some help from Python developers who write PyPI packages (or open source software that depends on PyPI packages). My research group is interested in the impacts of different choices package managers make when designing their ecosystems -- e.g. Python/PyPi, Hackage and R/CRAN. We'd like to know what the implications of PyPI's design choices are on Python programmers' collaboration when making breaking changes among packages, and what you think PyPI's design is trying to accomplish.\n\nCould I ask people to take ~20 minutes of your time and fill out our survey at http://breakingapis.org/survey? I'll report back here when we've analyzed the results (or there's a sign up link to be notified when results are out at http://breakingapis.org).\n\n(If you don't use PyPI, but do use some other software ecosystem, like Node.js/NPM, CPAN, Erlang/Hex, or something else, we're still interested -- just make a different \"software ecosystem\" choice on the first page. The study is a comparison among ecosystems; PyPI is one point of comparison).",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xhhxb",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "cbogart",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xhhxb/looking_for_info_on_how_python_developers/",
          "locked": false,
          "name": "t3_4xhhxb",
          "created": 1471089132,
          "url": "https://www.reddit.com/r/Python/comments/4xhhxb/looking_for_info_on_how_python_developers/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Looking for info on how Python developers negotiate breaking changes in PyPI packages",
          "created_utc": 1471060332,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m looking for sites that I can easily and comprehensively interact with using python where in I can upload files (.txt files, employee attendances to be exact). Example: Reddit and PRAW sans the uploading.&lt;/p&gt;\n\n&lt;p&gt;EDIT: I have no plan on using selenium. I want the process to be unseen.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I'm looking for sites that I can easily and comprehensively interact with using python where in I can upload files (.txt files, employee attendances to be exact). Example: Reddit and PRAW sans the uploading.\n\nEDIT: I have no plan on using selenium. I want the process to be unseen.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xickz",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "slark_picker",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 9,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": 1471078892,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xickz/question_sites_where_python_can_easily_interact/",
          "locked": false,
          "name": "t3_4xickz",
          "created": 1471107463,
          "url": "https://www.reddit.com/r/Python/comments/4xickz/question_sites_where_python_can_easily_interact/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "[Question] Sites where python can easily interact and upload files.",
          "created_utc": 1471078663,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m new to python... And to the web development world... I work as a web designer but only as a front end developer. Recently I came across nodejs and discovered a entirely new universe made. I have 2 questions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;what does people mean with &amp;quot;web development&amp;quot; since it seems it&amp;#39;s a whole different thing from web designing with classic js,html and css?&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;why should I use python for web development? And why people use it instead of a classic hosted server.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Don&amp;#39;t be rude with me, I&amp;#39;m new to this world (also I&amp;#39;m Italian... Sorry for my bad English!).\nAnd if you could answer my questions with some basic examples I would be very grateful :) thanks a lot guys... \nAlso I would like to say that before asking these questions here I tried to find some answers on the internet but I haven&amp;#39;t found nothing useful...&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I'm new to python... And to the web development world... I work as a web designer but only as a front end developer. Recently I came across nodejs and discovered a entirely new universe made. I have 2 questions:\r\n\r\n* what does people mean with \"web development\" since it seems it's a whole different thing from web designing with classic js,html and css?\r\n\r\n* why should I use python for web development? And why people use it instead of a classic hosted server.\r\n\r\nDon't be rude with me, I'm new to this world (also I'm Italian... Sorry for my bad English!).\r\nAnd if you could answer my questions with some basic examples I would be very grateful :) thanks a lot guys... \r\nAlso I would like to say that before asking these questions here I tried to find some answers on the internet but I haven't found nothing useful...",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xdwbg",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "utopy",
          "media": null,
          "score": 9,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 7,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xdwbg/why_should_i_use_python_for_web_development/",
          "locked": false,
          "name": "t3_4xdwbg",
          "created": 1471042278,
          "url": "https://www.reddit.com/r/Python/comments/4xdwbg/why_should_i_use_python_for_web_development/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Why should i use python for web development?",
          "created_utc": 1471013478,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 9
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "gamingdirectional.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xi5fd",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "IslandTropical",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xi5fd/it_takes_me_a_while_to_figure_it_out_how_to/",
          "locked": false,
          "name": "t3_4xi5fd",
          "created": 1471102765,
          "url": "http://gamingdirectional.com/blog/2016/08/13/your-very-first-wxpython-project-in-python-3-5-2/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "It takes me a while to figure it out how to install Phoenix anyway here is the full tutorial",
          "created_utc": 1471073965,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "gist.github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xb6rp",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "benhoyt",
          "media": null,
          "score": 77,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 28,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xb6rp/got_bored_of_board_games_with_my_kids_so_wrote_a/",
          "locked": false,
          "name": "t3_4xb6rp",
          "created": 1470995204,
          "url": "https://gist.github.com/benhoyt/3f94abcb9b8c862776c3a2e2d7da43ea",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Got bored of board games with my kids, so wrote a script to calculate the average number of moves in a Snakes and Ladders game",
          "created_utc": 1470966404,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 77
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not a wizard in the sense that I&amp;#39;ve never taken a programming class in my life, I just learned Python and have been using it nearly daily for 3 years to manage data and do statistical analysis / machine learning. &lt;/p&gt;\n\n&lt;p&gt;I want to get buff my resume a bit by helping the development of a library or a project. I may be out of my depth seeing as I have no formal programming experience outside of statistical programming, but I am very eager to learn and I have about three weeks before classes start again.&lt;/p&gt;\n\n&lt;p&gt;If this question has been asked before, I apologize. I searched, but I couldn&amp;#39;t find exactly the same question.&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I'm not a wizard in the sense that I've never taken a programming class in my life, I just learned Python and have been using it nearly daily for 3 years to manage data and do statistical analysis / machine learning. \n\nI want to get buff my resume a bit by helping the development of a library or a project. I may be out of my depth seeing as I have no formal programming experience outside of statistical programming, but I am very eager to learn and I have about three weeks before classes start again.\n\nIf this question has been asked before, I apologize. I searched, but I couldn't find exactly the same question.\n\nThanks in advance.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xe60u",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "econdmg",
          "media": null,
          "score": 4,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 7,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xe60u/which_libraries_projects_need_development/",
          "locked": false,
          "name": "t3_4xe60u",
          "created": 1471045579,
          "url": "https://www.reddit.com/r/Python/comments/4xe60u/which_libraries_projects_need_development/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Which libraries / projects need development?",
          "created_utc": 1471016779,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 4
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;ReflectRPC is a library for writing self-describing JSON-RPC services. Instead of writing description files in XML or JSON-Schema you just add comments and type information when you register your RPC functions directly in your Python code and nowhere else. This information can then be queried at the runtime of your service by tools included with the library. Those tools generate HTML documentation or client code and allow to explore the service in an interactive shell.&lt;/p&gt;\n\n&lt;p&gt;Other features include a Twisted based server that supports Unix domain sockets, TCP sockets, HTTP, TLS and TLS client auth.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/aheck/reflectrpc\"&gt;https://github.com/aheck/reflectrpc&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;A complete example on how it is used can be found here: &lt;a href=\"https://github.com/aheck/reflectrpc/blob/master/examples/realworld/linux-sys-info.py\"&gt;https://github.com/aheck/reflectrpc/blob/master/examples/realworld/linux-sys-info.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "ReflectRPC is a library for writing self-describing JSON-RPC services. Instead of writing description files in XML or JSON-Schema you just add comments and type information when you register your RPC functions directly in your Python code and nowhere else. This information can then be queried at the runtime of your service by tools included with the library. Those tools generate HTML documentation or client code and allow to explore the service in an interactive shell.\n\nOther features include a Twisted based server that supports Unix domain sockets, TCP sockets, HTTP, TLS and TLS client auth.\n\nhttps://github.com/aheck/reflectrpc\n\nA complete example on how it is used can be found here: https://github.com/aheck/reflectrpc/blob/master/examples/realworld/linux-sys-info.py",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xg9a6",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "aheck1",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 3,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xg9a6/reflectrpc_selfdescribing_jsonrpc_services_made/",
          "locked": false,
          "name": "t3_4xg9a6",
          "created": 1471070136,
          "url": "https://www.reddit.com/r/Python/comments/4xg9a6/reflectrpc_selfdescribing_jsonrpc_services_made/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "ReflectRPC: Self-describing JSON-RPC services made easy",
          "created_utc": 1471041336,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was going through the &lt;a href=\"https://medium.com/@ageitgey/machine-learning-is-fun-part-3-deep-learning-and-convolutional-neural-networks-f40359318721#.490rrw5ve\"&gt;Machine Learning is Fun! Part 3: Deep Learning and Convolutional Neural Networks&lt;/a&gt; tutorial and was bothered that the data set he used is 5.2GB. I opened it and it&amp;#39;s just numerical arrays and could be a lot smaller.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://en.wikipedia.org/wiki/Hierarchical_Data_Format\"&gt;HDF5&lt;/a&gt; is designed for data storage and is easy to use through &lt;a href=\"http://www.h5py.org/\"&gt;h5py&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I went through and compared each of the HDF5 compression settings vs the pickle file. All gzip compression levels higher than 2 created a file smaller than the zipped pickle.&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th align=\"center\"&gt;File&lt;/th&gt;\n&lt;th align=\"center\"&gt;Size (MB)&lt;/th&gt;\n&lt;th align=\"center\"&gt;Write (s)&lt;/th&gt;\n&lt;th align=\"center\"&gt;Read (s)&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset_gzip1.hdf5&lt;/td&gt;\n&lt;td align=\"center\"&gt;453.06&lt;/td&gt;\n&lt;td align=\"center\"&gt;19.7&lt;/td&gt;\n&lt;td align=\"center\"&gt;12&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset_gzip2.hdf5&lt;/td&gt;\n&lt;td align=\"center\"&gt;421.59&lt;/td&gt;\n&lt;td align=\"center\"&gt;20.9&lt;/td&gt;\n&lt;td align=\"center\"&gt;11.7&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset_gzip3.hdf5&lt;/td&gt;\n&lt;td align=\"center\"&gt;402.65&lt;/td&gt;\n&lt;td align=\"center\"&gt;29.8&lt;/td&gt;\n&lt;td align=\"center\"&gt;11.1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset_gzip4.hdf5&lt;/td&gt;\n&lt;td align=\"center\"&gt;403.25&lt;/td&gt;\n&lt;td align=\"center\"&gt;28.1&lt;/td&gt;\n&lt;td align=\"center\"&gt;11.2&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset_gzip5.hdf5&lt;/td&gt;\n&lt;td align=\"center\"&gt;386.27&lt;/td&gt;\n&lt;td align=\"center\"&gt;36.3&lt;/td&gt;\n&lt;td align=\"center\"&gt;11.5&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset_gzip6.hdf5&lt;/td&gt;\n&lt;td align=\"center\"&gt;372.46&lt;/td&gt;\n&lt;td align=\"center\"&gt;58&lt;/td&gt;\n&lt;td align=\"center\"&gt;11.4&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset_gzip7.hdf5&lt;/td&gt;\n&lt;td align=\"center\"&gt;370.33&lt;/td&gt;\n&lt;td align=\"center\"&gt;75.6&lt;/td&gt;\n&lt;td align=\"center\"&gt;11&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset_gzip8.hdf5&lt;/td&gt;\n&lt;td align=\"center\"&gt;368.49&lt;/td&gt;\n&lt;td align=\"center\"&gt;108.7&lt;/td&gt;\n&lt;td align=\"center\"&gt;10.9&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset_gzip9.hdf5&lt;/td&gt;\n&lt;td align=\"center\"&gt;368.44&lt;/td&gt;\n&lt;td align=\"center\"&gt;115.3&lt;/td&gt;\n&lt;td align=\"center\"&gt;11.1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset_lzf.hdf5&lt;/td&gt;\n&lt;td align=\"center\"&gt;680.72&lt;/td&gt;\n&lt;td align=\"center\"&gt;12.5&lt;/td&gt;\n&lt;td align=\"center\"&gt;8.4&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset.pkl&lt;/td&gt;\n&lt;td align=\"center\"&gt;5229.57&lt;/td&gt;\n&lt;td align=\"center\"&gt;&lt;/td&gt;\n&lt;td align=\"center\"&gt;24.8&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;full_dataset.zip&lt;/td&gt;\n&lt;td align=\"center\"&gt;429.33&lt;/td&gt;\n&lt;td align=\"center\"&gt;&lt;/td&gt;\n&lt;td align=\"center\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;Additionally the hdf5 data took less than half as much time to load.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://gist.github.com/DadAtH-me/bc94787936031047f732bd70b9961610\"&gt;Source&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I was going through the [Machine Learning is Fun! Part 3: Deep Learning and Convolutional Neural Networks](https://medium.com/@ageitgey/machine-learning-is-fun-part-3-deep-learning-and-convolutional-neural-networks-f40359318721#.490rrw5ve) tutorial and was bothered that the data set he used is 5.2GB. I opened it and it's just numerical arrays and could be a lot smaller.\n\n[HDF5](https://en.wikipedia.org/wiki/Hierarchical_Data_Format) is designed for data storage and is easy to use through [h5py](http://www.h5py.org/).\n\nI went through and compared each of the HDF5 compression settings vs the pickle file. All gzip compression levels higher than 2 created a file smaller than the zipped pickle.\n\n|           File          | Size (MB) | Write (s) | Read (s) |\n|:-----------------------:|:---------:|:---------:|:--------:|\n| full_dataset_gzip1.hdf5 | 453.06    | 19.7      | 12       |\n| full_dataset_gzip2.hdf5 | 421.59    | 20.9      | 11.7     |\n| full_dataset_gzip3.hdf5 | 402.65    | 29.8      | 11.1     |\n| full_dataset_gzip4.hdf5 | 403.25    | 28.1      | 11.2     |\n| full_dataset_gzip5.hdf5 | 386.27    | 36.3      | 11.5     |\n| full_dataset_gzip6.hdf5 | 372.46    | 58        | 11.4     |\n| full_dataset_gzip7.hdf5 | 370.33    | 75.6      | 11       |\n| full_dataset_gzip8.hdf5 | 368.49    | 108.7     | 10.9     |\n| full_dataset_gzip9.hdf5 | 368.44    | 115.3     | 11.1     |\n| full_dataset_lzf.hdf5   | 680.72    | 12.5      | 8.4      |\n| full_dataset.pkl        | 5229.57   |           | 24.8     |\n| full_dataset.zip        | 429.33    |           |          |\n\nAdditionally the hdf5 data took less than half as much time to load.\n\n- [Source](https://gist.github.com/DadAtH-me/bc94787936031047f732bd70b9961610)",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xc5ok",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "DadAtH_me",
          "media": null,
          "score": 19,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 43,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xc5ok/pickle_shouldnt_be_used_for_large_sets_of_numeric/",
          "locked": false,
          "name": "t3_4xc5ok",
          "created": 1471011008,
          "url": "https://www.reddit.com/r/Python/comments/4xc5ok/pickle_shouldnt_be_used_for_large_sets_of_numeric/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Pickle shouldn't be used for large sets of numeric data.",
          "created_utc": 1470982208,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 19
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt;, &lt;/p&gt;\n\n&lt;p&gt;I come to you today as I wish to run &lt;a href=\"https://github.com/aesptux/download-reddit-saved-images\"&gt;this&lt;/a&gt; script. However, I am facing issues installing Pip, which means I can&amp;#39;t install PRAW. I&amp;#39;ve tried multiple different methods from around the web and all of it fails due to syntax, or it can&amp;#39;t find files, etc. &lt;/p&gt;\n\n&lt;p&gt;If anyone either has a download they can give me that&amp;#39;s python+pip+praw or can walk me through the install process I&amp;#39;d be very appreciative. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hello /r/python, \n\nI come to you today as I wish to run [this](https://github.com/aesptux/download-reddit-saved-images) script. However, I am facing issues installing Pip, which means I can't install PRAW. I've tried multiple different methods from around the web and all of it fails due to syntax, or it can't find files, etc. \n\nIf anyone either has a download they can give me that's python+pip+praw or can walk me through the install process I'd be very appreciative. ",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xhepf",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "7Arach7",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 5,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xhepf/help_installing_praw/",
          "locked": false,
          "name": "t3_4xhepf",
          "created": 1471087508,
          "url": "https://www.reddit.com/r/Python/comments/4xhepf/help_installing_praw/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "[Help] Installing PRAW",
          "created_utc": 1471058708,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "software.ac.uk",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xd2bv",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "MrTinnedPeach",
          "media": null,
          "score": 6,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xd2bv/python_comes_out_as_top_software_used_in_research/",
          "locked": false,
          "name": "t3_4xd2bv",
          "created": 1471030416,
          "url": "https://www.software.ac.uk/blog/2016-08-12-quick-and-dirty-analysis-software-being-used-research-python-matlab-and-r",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Python comes out as top software used in research",
          "created_utc": 1471001616,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 6
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "youtube.com",
          "banned_by": null,
          "media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/iLNHVwSu9EA?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": {
            "type": "youtube.com",
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "version": "1.0",
              "title": "Build an Antivirus in 5 Min - Fresh Machine Learning #7",
              "thumbnail_width": 480,
              "height": 338,
              "width": 600,
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/iLNHVwSu9EA?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "author_name": "Sirajology",
              "provider_name": "YouTube",
              "thumbnail_url": "https://i.ytimg.com/vi/iLNHVwSu9EA/hqdefault.jpg",
              "type": "video",
              "thumbnail_height": 360,
              "author_url": "https://www.youtube.com/channel/UCWN3xxRkmTPmbKwht9FuE5A"
            }
          },
          "link_flair_text": null,
          "id": "4xh9vg",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "llSourcell",
          "media": {
            "type": "youtube.com",
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "version": "1.0",
              "title": "Build an Antivirus in 5 Min - Fresh Machine Learning #7",
              "thumbnail_width": 480,
              "height": 338,
              "width": 600,
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/iLNHVwSu9EA?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "author_name": "Sirajology",
              "provider_name": "YouTube",
              "thumbnail_url": "https://i.ytimg.com/vi/iLNHVwSu9EA/hqdefault.jpg",
              "type": "video",
              "thumbnail_height": 360,
              "author_url": "https://www.youtube.com/channel/UCWN3xxRkmTPmbKwht9FuE5A"
            }
          },
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/iLNHVwSu9EA?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xh9vg/build_an_antivirus_in_5_minutes/",
          "locked": false,
          "name": "t3_4xh9vg",
          "created": 1471085253,
          "url": "https://www.youtube.com/watch?v=iLNHVwSu9EA",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Build an Antivirus in 5 Minutes",
          "created_utc": 1471056453,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/seemethere/retry.it\"&gt;https://github.com/seemethere/retry.it&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Hey guys! Last night I was looking for libraries to retry functions and every one that I ran into seemed a little too complex for what actually needed to be done. So I ended up writing my own!&lt;/p&gt;\n\n&lt;p&gt;Would love any suggestions on things to add, a review on the code, etc.&lt;/p&gt;\n\n&lt;p&gt;Hope you guys find it useful!&lt;/p&gt;\n\n&lt;h2&gt;Installation&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;pip install retry.it\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Examples&lt;/h2&gt;\n\n&lt;h3&gt;Use it as a decorator!&lt;/h3&gt;\n\n&lt;p&gt;Send a &lt;code&gt;GET&lt;/code&gt; request to a URL until it returns a status code of 200!\nRest a second between tries&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import requests\n\nfrom retry import retry\n\n@retry(max_retries=-1, interval=1, success=lambda x: x.status_code == 200)\ndef poll_url(url, method=&amp;#39;GET&amp;#39;):\n    return requests.request(method, url)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Use it as a wrapper!&lt;/h3&gt;\n\n&lt;p&gt;Send any type of request to a URL until it returns a status code set by the\nuser!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import requests\n\nfrom retry import retry\n\ndef poll_url(url, method=&amp;#39;GET&amp;#39;):\n    return requests.request(method, url)\n\ndef poll_url_with_retries(\n        url, method=&amp;#39;GET&amp;#39;, max_retries=-1, interval=1, status_code=200):\n    return retry(\n        max_retries=max_retries,\n        interval=interval,\n        success=lambda x: x.status_code == status_code)(poll_url)(url, method)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "https://github.com/seemethere/retry.it\n\nHey guys! Last night I was looking for libraries to retry functions and every one that I ran into seemed a little too complex for what actually needed to be done. So I ended up writing my own!\n\nWould love any suggestions on things to add, a review on the code, etc.\n\nHope you guys find it useful!\n\n## Installation\n\n    pip install retry.it\n\n\n## Examples\n\n### Use it as a decorator!\nSend a `GET` request to a URL until it returns a status code of 200!\nRest a second between tries\n\n    import requests\n    \n    from retry import retry\n\n    @retry(max_retries=-1, interval=1, success=lambda x: x.status_code == 200)\n    def poll_url(url, method='GET'):\n        return requests.request(method, url)\n\n### Use it as a wrapper!\nSend any type of request to a URL until it returns a status code set by the\nuser!\n\n    import requests\n    \n    from retry import retry\n    \n    def poll_url(url, method='GET'):\n        return requests.request(method, url)\n    \n    def poll_url_with_retries(\n            url, method='GET', max_retries=-1, interval=1, status_code=200):\n        return retry(\n            max_retries=max_retries,\n            interval=interval,\n            success=lambda x: x.status_code == status_code)(poll_url)(url, method)\n",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xdq90",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "_seemethere",
          "media": null,
          "score": 3,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 6,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xdq90/retryit_a_simple_python_retry_library/",
          "locked": false,
          "name": "t3_4xdq90",
          "created": 1471040130,
          "url": "https://www.reddit.com/r/Python/comments/4xdq90/retryit_a_simple_python_retry_library/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "retry.it, a simple python retry library",
          "created_utc": 1471011330,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 3
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not a hundred percent sure this is the place to post this, but I&amp;#39;m just starting to go raving mad. After finnaly managing to install scapy for python 2.7 with all its dependencies, whenever I simply type &amp;quot;scapy&amp;quot; in powershell, it crashes. And, when I try to use it in a python script, the simple mention of &amp;quot;from scapy.all import *&amp;quot; also crashes python.  &lt;/p&gt;\n\n&lt;p&gt;Kind of wondering if anybody had the same issue, and if so, how did you manage to fix it.  &lt;/p&gt;\n\n&lt;p&gt;Thanks in advance, and sorry if this the wrong subreddit.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I'm not a hundred percent sure this is the place to post this, but I'm just starting to go raving mad. After finnaly managing to install scapy for python 2.7 with all its dependencies, whenever I simply type \"scapy\" in powershell, it crashes. And, when I try to use it in a python script, the simple mention of \"from scapy.all import *\" also crashes python.  \n\n\nKind of wondering if anybody had the same issue, and if so, how did you manage to fix it.  \n\nThanks in advance, and sorry if this the wrong subreddit.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xfc76",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "Jawarisin",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xfc76/scapy_crashing_python_whenever_called_im_tottaly/",
          "locked": false,
          "name": "t3_4xfc76",
          "created": 1471058815,
          "url": "https://www.reddit.com/r/Python/comments/4xfc76/scapy_crashing_python_whenever_called_im_tottaly/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Scapy crashing python whenever called, I'm tottaly lost",
          "created_utc": 1471030015,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been using python for years and either never knew this or completely forgot...&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I've been using python for years and either never knew this or completely forgot...",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xhskf",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "BomarzosTurtle",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 13,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xhskf/fyi_quickly_make_a_dictionary_as_dicthowdid_inot/",
          "locked": false,
          "name": "t3_4xhskf",
          "created": 1471095001,
          "url": "https://www.reddit.com/r/Python/comments/4xhskf/fyi_quickly_make_a_dictionary_as_dicthowdid_inot/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "FYI Quickly make a dictionary as dict(how='did', I='not', know='about this!')",
          "created_utc": 1471066201,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "nbviewer.jupyter.org",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xelf4",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "stephenskory",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xelf4/i_optimized_state_fair_trip_planning_using_python/",
          "locked": false,
          "name": "t3_4xelf4",
          "created": 1471050540,
          "url": "http://nbviewer.jupyter.org/urls/bitbucket.org/sskory/statefairtripplanning/raw/tip/State%20Fair%20Trip%20Planning.ipynb",
          "author_flair_text": null,
          "quarantine": false,
          "title": "I Optimized State Fair Trip Planning using Python and Graph Networks",
          "created_utc": 1471021740,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all, I&amp;#39;ve been wanting to learn more about data scraping and I think I want to learn Python to do that. I&amp;#39;m a statistician so I know a good amount about what to do when I actually have the data, but the data scraping is what I need to learn how to do. If anyone is in the same boat, or the opposite boat (you know Python, dont know stats) and would like to work together and learn some stuff, hit me up!&lt;/p&gt;\n\n&lt;p&gt;Edit: Hey guys this blew up a lot more than I thought it would. I&amp;#39;ve contacted a few of you who have similar interests to me and we&amp;#39;ve made a small group (small just because we dont want it to become unmanageable). We&amp;#39;ll be making a github soon and including anything we&amp;#39;re working on as well as tutorials and the such for others to fall along. Thanks again for all the help!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hi all, I've been wanting to learn more about data scraping and I think I want to learn Python to do that. I'm a statistician so I know a good amount about what to do when I actually have the data, but the data scraping is what I need to learn how to do. If anyone is in the same boat, or the opposite boat (you know Python, dont know stats) and would like to work together and learn some stuff, hit me up!\n\n\n\nEdit: Hey guys this blew up a lot more than I thought it would. I've contacted a few of you who have similar interests to me and we've made a small group (small just because we dont want it to become unmanageable). We'll be making a github soon and including anything we're working on as well as tutorials and the such for others to fall along. Thanks again for all the help!",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4x8192",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "JiNaMoN",
          "media": null,
          "score": 139,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 77,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": 1471006990,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4x8192/want_to_start_learning_more_about_data/",
          "locked": false,
          "name": "t3_4x8192",
          "created": 1470951719,
          "url": "https://www.reddit.com/r/Python/comments/4x8192/want_to_start_learning_more_about_data/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Want to start learning more about data mining/scraping using Python, anyone interested in joining me and learning together?",
          "created_utc": 1470922919,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 139
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all.&lt;/p&gt;\n\n&lt;p&gt;So I&amp;#39;m relatively new with python, most of my programming experience is in C, but for this project python seems way easier yet I&amp;#39;m still running into problems.  I was hoping some kind soul in here could help.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m trying to set up a server and client to get video through a tcp socket.  I&amp;#39;ve done some simple stuff with udp and tcp just sending text, but sending a stream of multi-channel images and then rebuilding them on the client side is confusing for my noobness.  Does anyone know of a good tutorial concerning this sort of thing?  Or if you&amp;#39;re willing to take a stab at it, an explanation would be awesome.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hi all.\n\nSo I'm relatively new with python, most of my programming experience is in C, but for this project python seems way easier yet I'm still running into problems.  I was hoping some kind soul in here could help.\n\nI'm trying to set up a server and client to get video through a tcp socket.  I've done some simple stuff with udp and tcp just sending text, but sending a stream of multi-channel images and then rebuilding them on the client side is confusing for my noobness.  Does anyone know of a good tutorial concerning this sort of thing?  Or if you're willing to take a stab at it, an explanation would be awesome.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xc6d5",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "MrBowelsrelaxed",
          "media": null,
          "score": 5,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 4,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xc6d5/webcam_video_through_tcp_socket/",
          "locked": false,
          "name": "t3_4xc6d5",
          "created": 1471011350,
          "url": "https://www.reddit.com/r/Python/comments/4xc6d5/webcam_video_through_tcp_socket/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Webcam video through TCP socket",
          "created_utc": 1470982550,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 5
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xduaq",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "xeoomd",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 4,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xduaq/i_always_wanted_to_learn_python_and_this_is_my/",
          "locked": false,
          "name": "t3_4xduaq",
          "created": 1471041574,
          "url": "https://github.com/cuongnv23/curl2share",
          "author_flair_text": null,
          "quarantine": false,
          "title": "I always wanted to learn python, and this is my first simple flask app to share files using command line (curl). Mind to read and give beginner comments?",
          "created_utc": 1471012774,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So im having problems getting this too run and am not sure why. I only want it so I can execute multiple lines of code in the shell so if theres another option besides idelx that would be helpful. Any suggestions?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "So im having problems getting this too run and am not sure why. I only want it so I can execute multiple lines of code in the shell so if theres another option besides idelx that would be helpful. Any suggestions?",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xfpch",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "spankthatmonkey",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xfpch/idelx_extension/",
          "locked": false,
          "name": "t3_4xfpch",
          "created": 1471063034,
          "url": "https://www.reddit.com/r/Python/comments/4xfpch/idelx_extension/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Idelx Extension?",
          "created_utc": 1471034234,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "gab41.lab41.org",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4x8oo4",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "amplifier_khan",
          "media": null,
          "score": 50,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 10,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4x8oo4/the_10_algorithms_machine_learning_engineers_need/",
          "locked": false,
          "name": "t3_4x8oo4",
          "created": 1470959633,
          "url": "https://gab41.lab41.org/the-10-algorithms-machine-learning-engineers-need-to-know-f4bb63f5b2fa#.uz3kzxi2d",
          "author_flair_text": null,
          "quarantine": false,
          "title": "The 10 Algorithms Machine Learning Engineers Need to Know",
          "created_utc": 1470930833,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 50
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Recently I&amp;#39;ve tried several languages and Python appeals to me the most so far.\nI&amp;#39;m not absolutely new to programming which is why I don&amp;#39;t need a book covering control structures in 50 pages. \nI&amp;#39;d like to buy a book that is relevant, detailed, well-structured (in that the author doesn&amp;#39;t throw new concepts at you without properly explaining them first). \nI&amp;#39;ve skimmed through &amp;quot;Learning Python&amp;quot; by Mark Lutz and it seemed awfully verbose to me. \n&amp;quot;Learn Python the Hard Way&amp;quot; uses the approach of type along to Zed Shaw which is not my cup of tea. \n&amp;quot;Python Crash Course&amp;quot; by Eric Matthes only touches on the basics. I need much more than that. \nProbably, the official documentation is the best way to get my feet wet with Python?\nI will highly appreciate any suggestions. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Recently I've tried several languages and Python appeals to me the most so far.\nI'm not absolutely new to programming which is why I don't need a book covering control structures in 50 pages. \nI'd like to buy a book that is relevant, detailed, well-structured (in that the author doesn't throw new concepts at you without properly explaining them first). \nI've skimmed through \"Learning Python\" by Mark Lutz and it seemed awfully verbose to me. \n\"Learn Python the Hard Way\" uses the approach of type along to Zed Shaw which is not my cup of tea. \n\"Python Crash Course\" by Eric Matthes only touches on the basics. I need much more than that. \nProbably, the official documentation is the best way to get my feet wet with Python?\nI will highly appreciate any suggestions. ",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xd88b",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "dondraper36",
          "media": null,
          "score": 1,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 4,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xd88b/detailed_and_deep_introduction_to_python/",
          "locked": false,
          "name": "t3_4xd88b",
          "created": 1471033179,
          "url": "https://www.reddit.com/r/Python/comments/4xd88b/detailed_and_deep_introduction_to_python/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Detailed and deep introduction to Python",
          "created_utc": 1471004379,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 1
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "bugs.python.org",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4x92rf",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "brombaer3000",
          "media": null,
          "score": 22,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 88,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4x92rf/pep_628_got_accepted_introducing_the_mathtau/",
          "locked": false,
          "name": "t3_4x92rf",
          "created": 1470964107,
          "url": "http://bugs.python.org/issue12345#msg272287",
          "author_flair_text": null,
          "quarantine": false,
          "title": "PEP 628 got accepted! (introducing the math.tau constant)",
          "created_utc": 1470935307,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 22
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "plus.google.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xaace",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "_amol_",
          "media": null,
          "score": 12,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 5,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xaace/turbogears_239_released_with_faster_validated_new/",
          "locked": false,
          "name": "t3_4xaace",
          "created": 1470978163,
          "url": "https://plus.google.com/+turbogears/posts/6VUzfGSw3sn",
          "author_flair_text": null,
          "quarantine": false,
          "title": "TurboGears 2.3.9 released with faster validated new default templating engine and improved Python3.5 support.",
          "created_utc": 1470949363,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 12
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "tutorials.pluralsight.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xarup",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "zuuku",
          "media": null,
          "score": 4,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xarup/build_a_simpsons_quotebot_with_twilio_mms/",
          "locked": false,
          "name": "t3_4xarup",
          "created": 1470990182,
          "url": "http://tutorials.pluralsight.com/interesting-apis/build-a-simpsons-quote-bot-with-twilio-mms-frinkiac-and-python",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Build a Simpsons Quote-Bot with Twilio MMS, Frinkiac, and Python",
          "created_utc": 1470961382,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 4
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I tried my hand at creating a minimal Python P2P library and this it the code I came up with:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import sys, socket, asyncore, threading, Queue\n\nPEERS, RECVQ = {}, Queue.Queue()\n\nclass PeerHandler(asyncore.dispatcher_with_send):\n    def handle_read(self):\n        data = self.recv(4096)\n        if data:\n            RECVQ.put(data)\n            for sock in PEERS.itervalues():\n                try: sock.sendall(data)\n                except socket.error: continue\n\nclass P2PServer(asyncore.dispatcher):\n    def __init__(self, host, port):\n        asyncore.dispatcher.__init__(self)\n        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.set_reuse_addr()\n        self.bind((host, port))\n        self.listen(5)\n\n    def handle_accept(self):\n        pair = self.accept()\n        if pair is not None:\n            sock, addr = pair\n            handler = PeerHandler(sock)\n\nclass Node(object):\n    def __init__(self, host, port):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server = P2PServer(host, port)\n        self.thread = threading.Thread(target=asyncore.loop, args=(10,))\n        self.thread.daemon = True\n        self.thread.start()\n\n    @property\n    def routing_table(self):\n        return PEERS\n\n    @property\n    def peers(self):\n        return PEERS.keys()\n\n    def add_peer(self, host, port):\n        try:\n            self.sock.connect((host, port))\n            PEERS[&amp;#39;{}:{}&amp;#39;.format(host, port)] = self.sock\n        except socket.error:\n            pass\n\n    def send(self, data):\n        for sock in PEERS.itervalues():\n            try: sock.sendall(data)\n            except socket.error: pass\n\n    def recv(self):\n        try: return RECVQ.get(False)\n        except: return &amp;#39;&amp;#39;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How this works is basically that a node is both a client and a server. Basically when data is sent it is sent to all peers, and when data is received, it is forwarded to all peers. This is completely asynchronous.&lt;/p&gt;\n\n&lt;p&gt;I wanted to ask if this thing that I have coded is even a proper P2P implementation. It works, but I feel like something is missing. Also, is this efficient and scalable? I tested it numerous times but only with a few computers and I really couldn&amp;#39;t find any answers to my questions.&lt;/p&gt;\n\n&lt;p&gt;Many thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "I tried my hand at creating a minimal Python P2P library and this it the code I came up with:\n\n\n    import sys, socket, asyncore, threading, Queue\n    \n    PEERS, RECVQ = {}, Queue.Queue()\n    \n    class PeerHandler(asyncore.dispatcher_with_send):\n        def handle_read(self):\n            data = self.recv(4096)\n            if data:\n                RECVQ.put(data)\n                for sock in PEERS.itervalues():\n                    try: sock.sendall(data)\n                    except socket.error: continue\n    \n    class P2PServer(asyncore.dispatcher):\n        def __init__(self, host, port):\n            asyncore.dispatcher.__init__(self)\n            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.set_reuse_addr()\n            self.bind((host, port))\n            self.listen(5)\n    \n        def handle_accept(self):\n            pair = self.accept()\n            if pair is not None:\n                sock, addr = pair\n                handler = PeerHandler(sock)\n    \n    class Node(object):\n        def __init__(self, host, port):\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.server = P2PServer(host, port)\n            self.thread = threading.Thread(target=asyncore.loop, args=(10,))\n            self.thread.daemon = True\n            self.thread.start()\n    \n        @property\n        def routing_table(self):\n            return PEERS\n    \n        @property\n        def peers(self):\n            return PEERS.keys()\n    \n        def add_peer(self, host, port):\n            try:\n                self.sock.connect((host, port))\n                PEERS['{}:{}'.format(host, port)] = self.sock\n            except socket.error:\n                pass\n    \n        def send(self, data):\n            for sock in PEERS.itervalues():\n                try: sock.sendall(data)\n                except socket.error: pass\n    \n        def recv(self):\n            try: return RECVQ.get(False)\n            except: return ''\n    \n\n\nHow this works is basically that a node is both a client and a server. Basically when data is sent it is sent to all peers, and when data is received, it is forwarded to all peers. This is completely asynchronous.\n\nI wanted to ask if this thing that I have coded is even a proper P2P implementation. It works, but I feel like something is missing. Also, is this efficient and scalable? I tested it numerous times but only with a few computers and I really couldn't find any answers to my questions.\n\nMany thanks!",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4x80tn",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "pynet",
          "media": null,
          "score": 8,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 6,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": 1470923209,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4x80tn/i_created_a_minimal_python_p2p_library_could/",
          "locked": false,
          "name": "t3_4x80tn",
          "created": 1470951549,
          "url": "https://www.reddit.com/r/Python/comments/4x80tn/i_created_a_minimal_python_p2p_library_could/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "I created a minimal Python P2P library. Could someone tell me if the P2P design is optimal?",
          "created_utc": 1470922749,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 8
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys, I work at a Clinic and we&amp;#39;re digitizing all our paper charts finally. To do this we need to go on a website, search a name &amp;quot;Doe, John&amp;quot; and then navigate to a specific &amp;quot;Print Patient Info&amp;quot; button. The not fun part about this is that we have 1700 patients, and if we could just type up a list of those names and give it to a program that would be incredible for us. Is this doable?&lt;/p&gt;\n\n&lt;p&gt;Edit:We have to fax all our paper charts to the company that we&amp;#39;re using for e-charts. The patient&amp;#39;s names are already in their system, but to actually fill out their chart we have to print these sheets that are specific to each patient.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hey guys, I work at a Clinic and we're digitizing all our paper charts finally. To do this we need to go on a website, search a name \"Doe, John\" and then navigate to a specific \"Print Patient Info\" button. The not fun part about this is that we have 1700 patients, and if we could just type up a list of those names and give it to a program that would be incredible for us. Is this doable?\n\nEdit:We have to fax all our paper charts to the company that we're using for e-charts. The patient's names are already in their system, but to actually fill out their chart we have to print these sheets that are specific to each patient.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xb3au",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "ronbbot",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 12,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": 1470965702,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4xb3au/is_it_possible_to_make_a_program_that_can_search/",
          "locked": false,
          "name": "t3_4xb3au",
          "created": 1470993878,
          "url": "https://www.reddit.com/r/Python/comments/4xb3au/is_it_possible_to_make_a_program_that_can_search/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Is it possible to make a program that can search names on a website and print information for my clinic?",
          "created_utc": 1470965078,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "youtube.com",
          "banned_by": null,
          "media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/videoseries?list=PL2NFhrDSOxgX-A4qpaf3rRaEnEe7166Ac\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "title": "Django Con 2016 - Keynote by Saron Yitbarek",
              "type": "video",
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/videoseries?list=PL2NFhrDSOxgX-A4qpaf3rRaEnEe7166Ac\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "height": 338,
              "width": 600,
              "version": "1.0",
              "author_name": "DjangoConUS",
              "thumbnail_height": 360,
              "thumbnail_url": "https://i.ytimg.com/vi/BUmV6fsZegs/hqdefault.jpg",
              "provider_name": "YouTube",
              "author_url": "https://www.youtube.com/channel/UC0yY6a79pPY9J0ShIHRf6yw"
            },
            "type": "youtube.com"
          },
          "link_flair_text": null,
          "id": "4x9qo9",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "xpostudio4",
          "media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "title": "Django Con 2016 - Keynote by Saron Yitbarek",
              "type": "video",
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/videoseries?list=PL2NFhrDSOxgX-A4qpaf3rRaEnEe7166Ac\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "height": 338,
              "width": 600,
              "version": "1.0",
              "author_name": "DjangoConUS",
              "thumbnail_height": 360,
              "thumbnail_url": "https://i.ytimg.com/vi/BUmV6fsZegs/hqdefault.jpg",
              "provider_name": "YouTube",
              "author_url": "https://www.youtube.com/channel/UC0yY6a79pPY9J0ShIHRf6yw"
            },
            "type": "youtube.com"
          },
          "score": 3,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 0,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/videoseries?list=PL2NFhrDSOxgX-A4qpaf3rRaEnEe7166Ac\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4x9qo9/djangocon_us_2016_videos_finally_are_being/",
          "locked": false,
          "name": "t3_4x9qo9",
          "created": 1470971613,
          "url": "https://www.youtube.com/watch?v=BUmV6fsZegs&amp;list=PL2NFhrDSOxgX-A4qpaf3rRaEnEe7166Ac",
          "author_flair_text": null,
          "quarantine": false,
          "title": "DjangoCon US 2016 videos finally are being uploaded!",
          "created_utc": 1470942813,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 3
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "self.Python",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all,&lt;/p&gt;\n\n&lt;p&gt;I have been working on a &lt;a href=\"https://github.com/Sjc1000/xfwm_theme_creator\"&gt;program&lt;/a&gt; that makes it easy to create XFCE window manager themes. It is still a work in progress but It is in working order. If you are a Linux user and use XFCE for a Window Manager you can easily create or edit themes.&lt;/p&gt;\n\n&lt;p&gt;It supports painting with GTK variables so your window manager theme can change depending on what GTK theme you are using. (See the &lt;a href=\"https://github.com/Sjc1000/xfwm_theme_creator\"&gt;github link&lt;/a&gt; for more info).&lt;/p&gt;\n\n&lt;p&gt;Id love to hear any feedback or suggestions. All comments are welcome.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "selftext": "Hi all,\n\nI have been working on a [program](https://github.com/Sjc1000/xfwm_theme_creator) that makes it easy to create XFCE window manager themes. It is still a work in progress but It is in working order. If you are a Linux user and use XFCE for a Window Manager you can easily create or edit themes.\n\nIt supports painting with GTK variables so your window manager theme can change depending on what GTK theme you are using. (See the [github link](https://github.com/Sjc1000/xfwm_theme_creator) for more info).\n\nId love to hear any feedback or suggestions. All comments are welcome.",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4x7ps2",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "sj1K",
          "media": null,
          "score": 9,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 1,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": true,
          "from_id": null,
          "permalink": "/r/Python/comments/4x7ps2/xfwm_theme_creator_a_simple_gui_for_easily/",
          "locked": false,
          "name": "t3_4x7ps2",
          "created": 1470947209,
          "url": "https://www.reddit.com/r/Python/comments/4x7ps2/xfwm_theme_creator_a_simple_gui_for_easily/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "XFWM theme creator - A simple GUI for easily creating / editing XFWM themes.",
          "created_utc": 1470918409,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 9
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "youtube.com",
          "banned_by": null,
          "media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BGF50a8rUb4?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "version": "1.0",
              "title": "uArm Creator Studio - Robot Arms and Computer Vision Made Easy",
              "author_name": "Alex Thiel",
              "height": 338,
              "width": 600,
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BGF50a8rUb4?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "thumbnail_height": 360,
              "thumbnail_url": "https://i.ytimg.com/vi/BGF50a8rUb4/hqdefault.jpg",
              "type": "video",
              "provider_name": "YouTube",
              "author_url": "https://www.youtube.com/user/Apockill"
            },
            "type": "youtube.com"
          },
          "link_flair_text": null,
          "id": "4x30bt",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "apockill",
          "media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "version": "1.0",
              "title": "uArm Creator Studio - Robot Arms and Computer Vision Made Easy",
              "author_name": "Alex Thiel",
              "height": 338,
              "width": 600,
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BGF50a8rUb4?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "thumbnail_height": 360,
              "thumbnail_url": "https://i.ytimg.com/vi/BGF50a8rUb4/hqdefault.jpg",
              "type": "video",
              "provider_name": "YouTube",
              "author_url": "https://www.youtube.com/user/Apockill"
            },
            "type": "youtube.com"
          },
          "score": 308,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 36,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BGF50a8rUb4?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4x30bt/i_just_finished_my_biggest_programming_project_so/",
          "locked": false,
          "name": "t3_4x30bt",
          "created": 1470875594,
          "url": "https://www.youtube.com/watch?v=BGF50a8rUb4",
          "author_flair_text": null,
          "quarantine": false,
          "title": "I just finished my biggest programming project so far- I built a Visual Programming Language for programming robot arms, with integrated computer vision, done entirely with Python",
          "created_utc": 1470846794,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 308
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "galeascience.wordpress.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4x5451",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "thecheesehouse",
          "media": null,
          "score": 56,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 6,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4x5451/the_most_popular_pandas_numpy_and_scipy_functions/",
          "locked": false,
          "name": "t3_4x5451",
          "created": 1470901037,
          "url": "https://galeascience.wordpress.com/2016/08/10/top-10-pandas-numpy-and-scipy-functions-on-github/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "The most popular Pandas, NumPy and SciPy functions on Github - visualizations and examples",
          "created_utc": 1470872237,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 56
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "kdnuggets.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4xaauq",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "amplifier_khan",
          "media": null,
          "score": 0,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 2,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4xaauq/the_grammar_of_data_science_python_vs_r/",
          "locked": false,
          "name": "t3_4xaauq",
          "created": 1470978338,
          "url": "http://www.kdnuggets.com/2015/03/the-grammar-data-science-python-vs-r.html",
          "author_flair_text": null,
          "quarantine": false,
          "title": "The Grammar of Data Science: Python vs R",
          "created_utc": 1470949538,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 0
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "gamingdirectional.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4x7nvy",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "IslandTropical",
          "media": null,
          "score": 5,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 2,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4x7nvy/interested_in_the_pygame_engine_this_tutorial/",
          "locked": false,
          "name": "t3_4x7nvy",
          "created": 1470946319,
          "url": "http://gamingdirectional.com/blog/2016/08/11/journey-into-pygame-the-beginning/",
          "author_flair_text": null,
          "quarantine": false,
          "title": "Interested in the PyGame engine? This tutorial will get you started",
          "created_utc": 1470917519,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 5
        }
      },
      {
        "kind": "t3",
        "data": {
          "domain": "github.com",
          "banned_by": null,
          "media_embed": {},
          "subreddit": "Python",
          "selftext_html": null,
          "selftext": "",
          "likes": null,
          "suggested_sort": null,
          "user_reports": [],
          "secure_media": null,
          "link_flair_text": null,
          "id": "4x49g0",
          "from_kind": null,
          "gilded": 0,
          "archived": false,
          "clicked": false,
          "report_reasons": null,
          "author": "pfalcon2",
          "media": null,
          "score": 78,
          "approved_by": null,
          "over_18": false,
          "hidden": false,
          "num_comments": 5,
          "thumbnail": "",
          "subreddit_id": "t5_2qh0y",
          "hide_score": false,
          "edited": false,
          "link_flair_css_class": null,
          "author_flair_css_class": null,
          "downs": 0,
          "secure_media_embed": {},
          "saved": false,
          "removal_reason": null,
          "stickied": false,
          "from": null,
          "is_self": false,
          "from_id": null,
          "permalink": "/r/Python/comments/4x49g0/micropython_183_released/",
          "locked": false,
          "name": "t3_4x49g0",
          "created": 1470890134,
          "url": "https://github.com/micropython/micropython/releases/tag/v1.8.3",
          "author_flair_text": null,
          "quarantine": false,
          "title": "MicroPython 1.8.3 released",
          "created_utc": 1470861334,
          "distinguished": null,
          "mod_reports": [],
          "visited": false,
          "num_reports": null,
          "ups": 78
        }
      }
    ],
    "after": "t3_4x49g0",
    "before": null
  }
}
